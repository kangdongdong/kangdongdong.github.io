<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Typora+github+picgo实现图片自动上传</title>
      <link href="2021/06/10/%E4%BD%BF%E7%94%A8Typora-github-picgo%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/"/>
      <url>2021/06/10/%E4%BD%BF%E7%94%A8Typora-github-picgo%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-使用github新建一个仓库"><a href="#1-使用github新建一个仓库" class="headerlink" title="1 使用github新建一个仓库"></a>1 使用github新建一个仓库</h1><p>注意为public</p><h1 id="2-获取token"><a href="#2-获取token" class="headerlink" title="2 获取token"></a>2 获取token</h1><p><img src="https://raw.githubusercontent.com/kiedeng/picture/main/img/image-20210610021810451.png" alt="image-20210610021810451"><img src="https://raw.githubusercontent.com/kiedeng/picture/main/img/image-20210610021942117.png" alt="image-20210610021942117"></p><p>复制生成的token，在第四步使用</p><h1 id="3-下载picgo"><a href="#3-下载picgo" class="headerlink" title="3 下载picgo"></a>3 下载picgo</h1><p>打开typora中的文件-》偏好设置-》图像，选择上传服务为picgo-core，然后点击“下载或更新”</p><h1 id="4-更新配置文件"><a href="#4-更新配置文件" class="headerlink" title="4 更新配置文件"></a>4 更新配置文件</h1><p>点击“打开配置文件”</p><pre class="line-numbers language-none"><code class="language-none">{  "picBed": {    "github": {      "repo": "kiedeng/picture",      "token": "******",      "path": "img/",      "customUrl": "",      "branch": "main"    },    "current": "github",    "uploader": "github"  },  "picgoPlugins": {}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-点击“验证图片上传选项”"><a href="#5-点击“验证图片上传选项”" class="headerlink" title="5 点击“验证图片上传选项”"></a>5 点击“验证图片上传选项”</h1><p>测试是否正常</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>beautifulsoup总结</title>
      <link href="2021/06/10/beautifulsoup%E6%80%BB%E7%BB%93/"/>
      <url>2021/06/10/beautifulsoup%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一，导包，读取文档内容"><a href="#一，导包，读取文档内容" class="headerlink" title="一，导包，读取文档内容"></a>一，导包，读取文档内容</h2><pre class="line-numbers language-none"><code class="language-none">from bs4 import BeautifulSoupsoup = BeautifulSoup(text,"lxml")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二，基本方法使用"><a href="#二，基本方法使用" class="headerlink" title="二，基本方法使用"></a>二，基本方法使用</h2><pre class="line-numbers language-none"><code class="language-none"># 查找第一个属性为tbody的标签s = soup.find("tbody")# 返回为tag的列表，可以再在进行查找操作s.contents# 返回的类型基本为str，不能进行继续查找操作s.children<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/kiedeng/picture/main/img/image-20210610020743914.png" alt="image-20210610020743914"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongdb基本操作</title>
      <link href="2021/06/07/mongdb%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>2021/06/07/mongdb%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1 创建数据库"></a>1 创建数据库</h1><pre class="line-numbers language-none"><code class="language-none">use DATABASE_NAME# 删除数据db.dropDatabase()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-创建集合"><a href="#2-创建集合" class="headerlink" title="2 创建集合"></a>2 创建集合</h1><pre class="line-numbers language-none"><code class="language-none">db.createCollection("runoob")# 删除集合db.collection.drop()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-插入文档"><a href="#3-插入文档" class="headerlink" title="3 插入文档"></a>3 插入文档</h1><pre class="line-numbers language-none"><code class="language-none">db.haiyan.insertMany({title: 'MongoDB 教程',     description: 'MongoDB 是一个 Nosql 数据库',    by: '菜鸟教程',    url: 'http://www.runoob.com',    tags: ['mongodb', 'database', 'NoSQL'],    likes: 100})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-查询文档"><a href="#4-查询文档" class="headerlink" title="4 查询文档"></a>4 查询文档</h1><pre class="line-numbers language-none"><code class="language-none">db.haiyan.find().pretty()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda的操作</title>
      <link href="2021/06/04/anaconda%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>2021/06/04/anaconda%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建新环境"><a href="#1-创建新环境" class="headerlink" title="1 创建新环境"></a>1 创建新环境</h1><p><a href="https://blog.csdn.net/zhajinjie/article/details/108948024">https://blog.csdn.net/zhajinjie/article/details/108948024</a></p><h2 id="2-不能使用jupter"><a href="#2-不能使用jupter" class="headerlink" title="2 不能使用jupter"></a>2 不能使用jupter</h2><p>安装了Python 2的Anaconda和Python 3的Anaconda(Windows都安装了64位)。如果我用 Jupyter Notebook 运行Python 2 一切都很好，但是对于Python 3，它不起作用</p><pre class="line-numbers language-none"><code class="language-none">pip uninstall pyzmq pip install pyzmq.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-修改anaconda默认的打开路径"><a href="#3-修改anaconda默认的打开路径" class="headerlink" title="3 修改anaconda默认的打开路径"></a>3 修改anaconda默认的打开路径</h3><p>使用修改快捷方式的方法改变路径</p><p>　　实现的方法就是修改快捷方式标签的目标栏，如下图：</p><p>　　<img src="https://images2018.cnblogs.com/blog/1405010/201805/1405010-20180523103240157-569682129.png" alt="img"></p><p>后面有一个%USERPROFILE%</p><p>将%USERPROFILE%改成你要的路径就”F:\Jupyter_Data”</p><p>然后应用-&gt;确定</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm中配置pyspark”</title>
      <link href="2021/06/04/pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEpyspark/"/>
      <url>2021/06/04/pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEpyspark/</url>
      
        <content type="html"><![CDATA[<p>1 下载官网spark-2.1.1-bin-hadoop2.7.tgz（版本自己选择），解压将文件放在了指定路径下，这个文件夹里面有python文件，python文件下还有两个压缩包py4j-some-version.zip和pyspark.zip，之后会用到）</p><p>2 pycharm使用pyspark时from pyspark import SparkContext，代码依然划红线，运行依然显示没有该模块。</p><p>3 随便打开一个project，pycharm右上角“run”三角形的左边有一个run configurition，打开它。</p><p>4 设置configurition—Environment— Environment variables —点击“…”，出现框框，点击+，输入两个name，一个是SPARK_HOME，另外一个是PYTHONPATH，设置它们的values，SPARK_HOME的value是安装文件夹spark-2.1.1-bin-hadoop2.7的绝对路径，PYTHONPATH的value是该绝对路径／python，例如我的SPARK_HOME的value是/Applications/spark/spark-2.1.1-bin-hadoop2.7，那么我的PYTHONPATH的value是/Applications/spark/spark-2.1.1-bin-hadoop2.7/python 。设置好了保存。（注意不管是路径的哪里，都不能有空格！！尤其是结尾！！今天下午就因为一个空格折磨我好久）</p><p>5 关键的一步。在perferences中的project structure中点击右边的“add  content root”，添加py4j-some-version.zip和pyspark.zip的路径（这两个文件都在Spark中的python文件夹下）</p><p>6 完成，from pyspark import SparkContext，红线消失，运行正常。</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小说阅读器</title>
      <link href="2021/03/09/%E5%B0%8F%E8%AF%B4%E9%98%85%E8%AF%BB%E5%99%A8/"/>
      <url>2021/03/09/%E5%B0%8F%E8%AF%B4%E9%98%85%E8%AF%BB%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>一个自定义数据源的阅读小说工具</p><h2 id="软件路径"><a href="#软件路径" class="headerlink" title="软件路径"></a>软件路径</h2><p><a href="https://github.com/gedoor/legado">https://github.com/gedoor/legado</a></p><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><p><a href="https://yuedu.xiu2.xyz/shuyuan">https://yuedu.xiu2.xyz/shuyuan</a></p><p><a href="https://moonbegonia.github.io/Source/yuedu/audio.json">https://moonbegonia.github.io/Source/yuedu/audio.json</a></p><p><a href="https://gitee.com/namofree/yuedu3/raw/legado3booksource/legado3_booksource_by_Namo.json">https://gitee.com/namofree/yuedu3/raw/legado3booksource/legado3_booksource_by_Namo.json</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据采集模块</title>
      <link href="2020/05/17/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%A8%A1%E5%9D%97/"/>
      <url>2020/05/17/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="一，hadoop安装"><a href="#一，hadoop安装" class="headerlink" title="一，hadoop安装"></a>一，hadoop安装</h2><h3 id="1-HDFS存储多目录"><a href="#1-HDFS存储多目录" class="headerlink" title="1 HDFS存储多目录"></a>1 HDFS存储多目录</h3><p>在hdfs-site.xml中操作</p><pre class="line-numbers language-none"><code class="language-none">&lt;property&gt;    &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;&lt;value&gt;file:///${hadoop.tmp.dir}/dfs/data1,file:///hd2/dfs/data2,file:///hd3/dfs/data3,file:///hd4/dfs/data4&lt;/value&gt;&lt;/property&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数据平衡指令</p><pre class="line-numbers language-none"><code class="language-none">bin/start-balancer.sh –threshold 10## 对于参数10，代表的是集群中各个节点的磁盘空间利用率相差不超过10%bin/stop-balancer.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-支持LZO压缩配置"><a href="#2-支持LZO压缩配置" class="headerlink" title="2 支持LZO压缩配置"></a>2 支持LZO压缩配置</h3><ul><li><p>将编译好的hadoop-lzo-0.4.20.jar 放入hadoop-2.7.2/share/hadoop/common/，并且分发给其他hadoop机器</p></li><li><p>core-site.xml增加配置支持LZO压缩，并分发给其他机器</p></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>io.compression.codecs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.BZip2Codec,org.apache.hadoop.io.compress.SnappyCodec,com.hadoop.compression.lzo.LzoCodec,com.hadoop.compression.lzo.LzopCodec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>io.compression.codec.lzo.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>com.hadoop.compression.lzo.LzoCodec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重启集群</li></ul><h3 id="3-LZO创建索引"><a href="#3-LZO创建索引" class="headerlink" title="3 LZO创建索引"></a>3 LZO创建索引</h3><p>LZO的可切片特性依赖于索引，所以需要为LZO压缩文件创建索引</p><pre class="line-numbers language-none"><code class="language-none">hadoop jar /opt/module/hadoop-2.7.2/share/hadoop/common/hadoop-lzo-0.4.20.jar  com.hadoop.compression.lzo.DistributedLzoIndexer /input/bigtable.lzo# hadoop jar (lzo的jar文件) com.hadoop.compression.lzo.DistributedLzoIndexer (输出文件)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-基准测试"><a href="#4-基准测试" class="headerlink" title="4 基准测试"></a>4 基准测试</h3><p>1）测试写性能</p><pre class="line-numbers language-none"><code class="language-none">hadoop jar /opt/module/hadoop-2.7.2/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.7.2-tests.jar TestDFSIO -write -nrFiles 10 -fileSize 128MB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）测试读性能</p><pre class="line-numbers language-none"><code class="language-none">hadoop jar /opt/module/hadoop-2.7.2/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.7.2-tests.jar TestDFSIO -read -nrFiles 10 -fileSize 128MB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）测试删除生成数据</p><pre class="line-numbers language-none"><code class="language-none">hadoop jar /opt/module/hadoop-2.7.2/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.7.2-tests.jar TestDFSIO -clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-Hadoop参数调优"><a href="#5-Hadoop参数调优" class="headerlink" title="5 Hadoop参数调优"></a>5 Hadoop参数调优</h3><p>1 hdfs-site.xml</p><pre class="line-numbers language-none"><code class="language-none">dfs.namenode.handler.count=20 * log2(Cluster Size)，比如集群规模为8台时，此参数设置为60NameNode有一个工作线程池，用来处理不同DataNode的并发心跳以及客户端并发的元数据操作。对于大集群或者有大量客户端的集群来说，通常需要增大参数dfs.namenode.handler.count的默认值10。设置该值的一般原则是将其设置为集群大小的自然对数乘以20，即20logN，N为集群大小。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2 参数调优yarn-site.xml</p><pre class="line-numbers language-none"><code class="language-none">内存利用率不够。这个一般是Yarn的2个配置造成的，单个任务可以申请的最大内存大小，和Hadoop单个节点可用内存大小。调节这两个参数能提高系统内存的利用率。（a）yarn.nodemanager.resource.memory-mb表示该节点上YARN可使用的物理内存总量，默认是8192（MB），注意，如果你的节点内存资源不够8GB，则需要调减小这个值，而YARN不会智能的探测节点的物理内存总量。（b）yarn.scheduler.maximum-allocation-mb单个任务可申请的最多物理内存量，默认是8192（MB）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3 Hadoop宕机</p><ul><li><p>如果<strong>MR造成系统宕机</strong>。此时要控制Yarn同时运行的任务数，和每个任务申请的最大内存。</p></li><li><p>如果写入文件过量造成<strong>NameNode宕机</strong>。那么调高Kafka的存储大小，控制从Kafka到HDFS的写入速度。</p></li></ul><h2 id="二，Zookeeper安装"><a href="#二，Zookeeper安装" class="headerlink" title="二，Zookeeper安装"></a>二，Zookeeper安装</h2><h2 id="三，日志生成"><a href="#三，日志生成" class="headerlink" title="三，日志生成"></a>三，日志生成</h2><h2 id="四，采集日志Flume"><a href="#四，采集日志Flume" class="headerlink" title="四，采集日志Flume"></a>四，采集日志Flume</h2><h2 id="五，Kafka安装"><a href="#五，Kafka安装" class="headerlink" title="五，Kafka安装"></a>五，Kafka安装</h2><p>六</p>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装superset</title>
      <link href="2020/05/17/%E5%AE%89%E8%A3%85superset/"/>
      <url>2020/05/17/%E5%AE%89%E8%A3%85superset/</url>
      
        <content type="html"><![CDATA[<p>概述：Apache Superset是一个开源的、现代的、轻量级BI分析工具，能够对接多种数据源、拥有丰富的图标展示形式、支持自定义仪表盘，且拥有友好的用户界面，十分易用。</p><h2 id="1-安装python环境"><a href="#1-安装python环境" class="headerlink" title="1 安装python环境"></a>1 安装python环境</h2><h3 id="安装Miniconda"><a href="#安装Miniconda" class="headerlink" title="安装Miniconda"></a>安装Miniconda</h3><p><strong>1</strong>）下载Miniconda（Python3版本）</p><p>下载地址：<a href="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh">https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</a></p><p><strong>2</strong>）安装Miniconda</p><p>(1) 执行以下命令进行安装，并按照提示操作，直到安装完成。</p><pre class="line-numbers language-none"><code class="language-none">bash Miniconda3-latest-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2) 安装过程中，可以指定安装路径</p><p>(3) 配置Miniconda的环境变量（可以不配，在安装路径的路径）</p><p>(4)取消激活base环境</p><pre class="line-numbers language-none"><code class="language-none">conda config --set auto_activate_base false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建Python3-6环境"><a href="#创建Python3-6环境" class="headerlink" title="创建Python3.6环境"></a>创建Python3.6环境</h3><p>1 配置conda国内镜像</p><pre class="line-numbers language-none"><code class="language-none">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/freeconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/mainconda config --set show_channel_urls yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2 创建Python3.6环境</p><pre class="line-numbers language-none"><code class="language-none">conda create --name superset python=3.6说明：conda环境管理常用命令创建环境：conda create -n env_name查看所有环境：conda info --envs删除一个环境：conda remove -n env_name --all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3 激活superset环境</p><pre class="line-numbers language-none"><code class="language-none">conda activate supersetconda deactivate(退出激活)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-Superset部署"><a href="#2-Superset部署" class="headerlink" title="2 Superset部署"></a>2 Superset部署</h2><p>1 安装依赖</p><pre class="line-numbers language-none"><code class="language-none">sudo yum install -y python-setuptoolssudo yum install -y gcc gcc-c++ libffi-devel python-devel python-pip python-wheel openssl-devel cyrus-sasl-devel openldap-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2 安装superset</p><pre class="line-numbers language-none"><code class="language-none">## 安装（更新）setuptools和pippip install --upgrade setuptools pip -i https://pypi.douban.com/simple/## 安装Supetsetpip install apache-superset -i https://pypi.douban.com/simple/## 初始化Supetset数据库superset db upgrade## 创建管理员用户export FLASK_APP=supersetflask fab create-admin## Superset初始化superset init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3 启动superset</p><p>1 安装gunicorn</p><pre class="line-numbers language-none"><code class="language-none">pip install gunicorn -i https://pypi.douban.com/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2 启动superset（确保环境为superset）</p><pre class="line-numbers language-none"><code class="language-none">gunicorn --workers 5 --timeout 120 --bind hadoop102:8787  superset:app --daemon 说明：--workers：指定进程个数--timeout：worker进程超时时间，超时会自动重启--bind：绑定本机地址，即为Superset访问地址--daemon：后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3 停止superseet</p><pre class="line-numbers language-none"><code class="language-none">ps -ef | awk '/gunicorn/ &amp;&amp; !/awk/{print $2}' | xargs kill -9退出环境conda deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4 登录supserset</p><pre class="line-numbers language-none"><code class="language-none">默认的端口为8787<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Superset的使用"><a href="#3-Superset的使用" class="headerlink" title="3 Superset的使用"></a>3 Superset的使用</h2>]]></content>
      
      
      <categories>
          
          <category> 安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>azkaban安装部署</title>
      <link href="2020/05/15/azkaban%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>2020/05/15/azkaban%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="生成密钥库所出现的问题"><a href="#生成密钥库所出现的问题" class="headerlink" title="生成密钥库所出现的问题"></a>生成密钥库所出现的问题</h2><p>补充：keytool -genkey -alias tomcat1 -keyalg RSA -keystore second.keystore</p><p>参考链接：<a href="https://blog.csdn.net/weixin_38038479/article/details/101207322">链接</a></p><h2 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h2><pre class="line-numbers language-none"><code class="language-none"># mail settingsmail.sender=572245955@qq.commail.host=smtp.qq.commail.user=572245955@qq.commail.password=(填写qq的授权码)job.failure.email=job.success.email=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Azkaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见命令行操作</title>
      <link href="2020/05/13/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/"/>
      <url>2020/05/13/%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="Kafka常见命令"><a href="#Kafka常见命令" class="headerlink" title="Kafka常见命令"></a>Kafka常见命令</h2><pre class="line-numbers language-none"><code class="language-none">启动生产者bin/kafka-console-producer.sh \--broker-list hadoop102:9092 --topic first启动消费者（zookeeper存储offset）bin/kafka-console-consumer.sh --topic atguigu --zookeeper hadoop102:2181启动消费者（本地存储offset）bin/kafka-console-consumer.sh --topic shangguigu --bootstrap-server hadoop102:9092<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题的美化</title>
      <link href="2020/05/05/%E4%B8%BB%E9%A2%98%E7%9A%84%E7%BE%8E%E5%8C%96/"/>
      <url>2020/05/05/%E4%B8%BB%E9%A2%98%E7%9A%84%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="一，增加天气效果"><a href="#一，增加天气效果" class="headerlink" title="一，增加天气效果"></a>一，增加天气效果</h2><p>打开<a href="https://wanghongfeng.cn/go/aHR0cHM6Ly93d3cuc2VuaXZlcnNlLmNvbQ==">心知天气</a>的官网，注册账号，并开通免费版服务。<br>之后在/handsome/component/headnav.php中搜索<!--/ search form-->，在搜索到的地方的前一行添加如下代码，并把其中的公钥和私钥修改为你自己的即可。</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 知心天气--&gt;    &lt;div id="tp-weather-widget" class="navbar-form navbar-form-sm navbar-left shift"&gt;&lt;/div&gt;&lt;script&gt;(function(T,h,i,n,k,P,a,g,e){g=function(){P=h.createElement(i);a=h.getElementsByTagName(i)[0];P.src=k;P.charset="utf-8";P.async=1;a.parentNode.insertBefore(P,a)};T["ThinkPageWeatherWidgetObject"]=n;T[n]||(T[n]=function(){(T[n].q=T[n].q||[]).push(arguments)});T[n].l=+new Date();if(T.attachEvent){T.attachEvent("onload",g)}else{T.addEventListener("load",g,false)}}(window,document,"script","tpwidget","//widget.seniverse.com/widget/chameleon.js"))&lt;/script&gt;&lt;script&gt;tpwidget("init", {    "flavor": "slim",    "location": "WX4FBXXFKE4F",    "geolocation": "enabled",    "language": "auto",    "unit": "c",    "theme": "chameleon",    "container": "tp-weather-widget",    "bubble": "enabled",    "alarmType": "badge",    "color": "#C6C6C6",    "uid": "你的公钥",    "hash": "你的私钥"});tpwidget("show");&lt;/script&gt;&lt;!-- 心知结束--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二，美化"><a href="#二，美化" class="headerlink" title="二，美化"></a>二，美化</h2><pre class="line-numbers language-none"><code class="language-none">/* * 文章一二三四级标题美化 */#post-content h1 {font-size: 30px}#post-content h2 {position: relative;margin: 20px 0 32px!important;font-size: 1.55em;}#post-content h3 {font-size: 20px}#post-content h4 {font-size: 15px}#post-content h2::after {transition: all .35s;content: "";position: absolute;background: linear-gradient(#3c67bd8c 30%,#3c67bd 70%);width: 1em;left: 0;box-shadow: 0 3px 3px rgba(32,160,255,.4);height: 3px;bottom: -8px;}#post-content h2::before {content: "";width: 100%;border-bottom: 1px solid #eee;bottom: -7px;position: absolute}#post-content h2:hover::after {width: 2.5em;}#post-content h1,#post-content h2,#post-content h3,#post-content h4,#post-content h5,#post-content h6 {color: #666;line-height: 1.4;font-weight: 700;margin: 30px 0 10px 0} /* *  首页文章列表悬停上浮 */.blog-post .panel:not(article) {transition: all 0.3s;}.blog-post .panel:not(article):hover {transform: translateY(-10px);box-shadow: 0 8px 10px rgba(73, 90, 47, 0.47);}/* *  文章内头图和文章图片悬停放大并将超出范围隐藏 */.entry-thumbnail {overflow: hidden;}#post-content img {border-radius: 10px;transition: 0.5s;}#post-content img:hover {transform: scale(1.05);}/* *首页文章图片获取焦点放大 */.item-thumb {cursor: pointer;transition: all 0.6s;}.item-thumb:hover {transform: scale(1.05);}.item-thumb-small {cursor: pointer;transition: all 0.6s;}.item-thumb-small:hover {transform: scale(1.05);}/*文章内打赏图标跳动*/.btn - pay {    animation: star 0.5s ease - in-out infinite alternate;}@keyframes star {    from {        transform: scale(1);    }    to {        transform: scale(1.1);    }}/* *修改字体 */*{font-family: 'Noto Serif SC', serif;font-family: 'Fira Code', monospace;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三，头像呼吸光环和鼠标悬停旋转放大"><a href="#三，头像呼吸光环和鼠标悬停旋转放大" class="headerlink" title="三，头像呼吸光环和鼠标悬停旋转放大"></a>三，头像呼吸光环和鼠标悬停旋转放大</h2><pre class="line-numbers language-none"><code class="language-none">.img-full {    width: 100px;    border-radius: 50%;    animation: light 4s ease-in-out infinite;    transition: 0.5s;}.img-full:hover {    transform: scale(1.15) rotate(720deg);}@keyframes light {    0% {        box-shadow: 0 0 4px #f00;    }    25% {        box-shadow: 0 0 16px #0f0;    }    50% {        box-shadow: 0 0 4px #00f;    }    75% {        box-shadow: 0 0 16px #0f0;    }    100% {        box-shadow: 0 0 4px #f00;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四，qq头像的图片链接"><a href="#四，qq头像的图片链接" class="headerlink" title="四，qq头像的图片链接"></a>四，qq头像的图片链接</h2><pre class="line-numbers language-none"><code class="language-none">https://q1.qlogo.cn/g?b=qq&amp;nk=572245955&amp;s=640<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五，自定义js美化"><a href="#五，自定义js美化" class="headerlink" title="五，自定义js美化"></a>五，自定义js美化</h2><pre class="line-numbers language-none"><code class="language-none">/*彩色标签云*/let tags = document.querySelectorAll("#tag_cloud-2 a");let colorArr = ["#428BCA", "#AEDCAE", "#ECA9A7", "#DA99FF", "#FFB380", "#D9B999"];tags.forEach(tag =&gt; {    tagsColor = colorArr[Math.floor(Math.random() * colorArr.length)];    tag.style.backgroundColor = tagsColor;});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六，博主介绍特效"><a href="#六，博主介绍特效" class="headerlink" title="六，博主介绍特效"></a>六，博主介绍特效</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!--博主介绍的闪字特效--&gt;&lt;span class="text-muted text-xs block"&gt;&lt;div id="chakhsu"&gt;&lt;/div&gt; &lt;script&gt; var chakhsu = function (r) {function t() {return b[Math.floor(Math.random() * b.length)]} function e() {return String.fromCharCode(94 * Math.random() + 33)} function n(r) {for (var n = document.createDocumentFragment(), i = 0; r &gt; i; i++) { var l = document.createElement("span"); l.textContent = e(), l.style.color = t(), n.appendChild(l) } return n}function i() {var t = o[c.skillI]; c.step ? c.step-- : (c.step = g, c.prefixP &lt; l.length ? (c.prefixP &gt;= 0 &amp;&amp; (c.text += l[c.prefixP]), c.prefixP++) : "forward" === c.direction ? c.skillP &lt; t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = "backward", c.delay = a) : c.skillP &gt; 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % o.length, c.direction = "forward")), r.textContent = c.text, r.appendChild(n(c.prefixP &lt; l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d) } /*以下内容自定义修改*/ var l = "", o = ["Keep Fighting" ].map(function (r) {return r + ""}), a = 2, g = 1, s = 5, d = 75, b = ["rgb(110,64,170)", "rgb(150,61,179)", "rgb(191,60,175)", "rgb(228,65,157)", "rgb(254,75,131)", "rgb(255,94,99)", "rgb(255,120,71)", "rgb(251,150,51)", "rgb(226,183,47)", "rgb(198,214,60)", "rgb(175,240,91)", "rgb(127,246,88)", "rgb(82,246,103)", "rgb(48,239,130)", "rgb(29,223,163)", "rgb(26,199,194)", "rgb(35,171,216)", "rgb(54,140,225)", "rgb(76,110,219)", "rgb(96,84,200)"], c = {text: "", prefixP: -s, skillI: 0, skillP: 0, direction: "forward", delay: a, step: g}; i() }; chakhsu(document.getElementById('chakhsu')); &lt;/script&gt; &lt;/span&gt; &lt;/span&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="七，倒计时"><a href="#七，倒计时" class="headerlink" title="七，倒计时"></a>七，倒计时</h2><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;        .gn_box{             border: none;             border-radius: 15px;         }          .gn_box {             padding: 10px 14px;             margin: 10px;             margin-bottom: 20px;             text-align: center;             background-color: #fff;         }          #t_d{             color: #982585;             font-size: 18px;         }          #t_h{             color: #8f79c1;             font-size: 18px;         }          #t_m{             color: #65b4b5;             font-size: 18px;         }          #t_s{             color: #83caa3;             font-size: 18px;         }       &lt;/style&gt;       &lt;div class="gn_box"&gt;             &lt;h1 style="font-size:1em;"&gt;&lt;font color="#E80017"&gt;2&lt;/font&gt;        &lt;font color="#D1002E"&gt;0&lt;/font&gt;        &lt;font color="#BA0045"&gt;2&lt;/font&gt;        &lt;font color="#A3005C"&gt;0&lt;/font&gt;        &lt;font color="#8C0073"&gt;年&lt;/font&gt;        &lt;font color="#75008A"&gt;-&lt;/font&gt;         &lt;font color="#5E00A1"&gt;秋&lt;/font&gt;        &lt;font color="#4700B8"&gt;招&lt;/font&gt;        &lt;font color="#3000CF"&gt;倒&lt;/font&gt;        &lt;font color="#1900E6"&gt;计&lt;/font&gt;        &lt;font color="#0200FD"&gt;时&lt;/font&gt;&lt;/h1&gt;        &lt;center&gt;          &lt;div id="CountMsg" class="HotDate"&gt;            &lt;span id="t_d"&gt; 天&lt;/span&gt;            &lt;span id="t_h"&gt; 时&lt;/span&gt;&lt;span id="t_m"&gt; 分&lt;/span&gt;            &lt;span id="t_s"&gt; 秒&lt;/span&gt;          &lt;/div&gt;        &lt;/center&gt;         &lt;script type="text/javascript"&gt;        function getRTime() {                var EndTime = new Date('2020/09/1 00:00:00');                       var NowTime = new Date();                       var t = EndTime.getTime() - NowTime.getTime();                              var d = Math.floor(t / 1000 / 60 / 60 / 24);                              var h = Math.floor(t / 1000 / 60 / 60 % 24);                              var m = Math.floor(t / 1000 / 60 % 60);                              var s = Math.floor(t / 1000 % 60);                      var day = document.getElementById("t_d");                     if (day != null) {                              day.innerHTML = d + " 天";                        }                         var hour = document.getElementById("t_h");                     if (hour != null) {                             hour.innerHTML = h + " 时";                       }                         var min = document.getElementById("t_m");                     if (min != null) {                            min.innerHTML = m + " 分";                        }                         var sec = document.getElementById("t_s");                     if (sec != null) {                             sec.innerHTML = s + " 秒";                     }          }               setInterval(getRTime, 1000);              &lt;/script&gt;      &lt;/div&gt;            &lt;!--首页输出文章--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="八，疫情图"><a href="#八，疫情图" class="headerlink" title="八，疫情图"></a>八，疫情图</h2><pre class="line-numbers language-none"><code class="language-none">&lt;iframe src="https://www.lovestu.com/api/project/cnmapyinqing/obj.php" height="500" frameborder="no" border="0" width="100%"&gt; &lt;/iframe&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考链接：<a href="https://wanghongfeng.cn/handsome-diy.html">https://wanghongfeng.cn/handsome-diy.html</a></p><p><a href="https://rehtt.com/index.php/archives/193">https://rehtt.com/index.php/archives/193</a></p>]]></content>
      
      
      <categories>
          
          <category> typecho </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hql常见函数</title>
      <link href="2020/03/19/hql%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
      <url>2020/03/19/hql%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>常用日期函数</p><p>unix_timestamp:返回当前或指定时间的时间戳    </p><p>from_unixtime：将时间戳转为日期格式</p><p>current_date：当前日期</p><p>current_timestamp：当前的日期加时间</p><p>to_date：抽取日期部分</p><p>year：获取年</p><p>month：获取月</p><p>day：获取日</p><p>hour：获取时</p><p>minute：获取分</p><p>second：获取秒</p><p>weekofyear：当前时间是一年中的第几周</p><p>dayofmonth：当前时间是一个月中的第几天</p><p>months_between： 两个日期间的月份</p><p>add_months：日期加减月</p><p>datediff：两个日期相差的天数</p><p>date_add：日期加天数</p><p>date_sub：日期减天数</p><p>last_day：日期的当月的最后一天</p><p>常用取整函数</p><p>round： 四舍五入</p><p>ceil：  向上取整</p><p>floor： 向下取整</p><p>常用字符串操作函数</p><p>upper： 转大写</p><p>lower： 转小写</p><p>length： 长度</p><p>trim：  前后去空格</p><p>lpad： 向左补齐，到指定长度</p><p>rpad：  向右补齐，到指定长度</p><p>regexp_replace： SELECT regexp_replace(‘100-200’, ‘(\d+)’, ‘num’) ；</p><p>​    使用正则表达式匹配目标字符串，匹配成功后替换！</p><p>集合操作</p><p>size： 集合中元素的个数</p><p>map_keys： 返回map中的key</p><p>map_values: 返回map中的value</p><p>array_contains: 判断array中是否包含某个元素</p><p>sort_array： 将array中的元素排序</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HQL常见错误</title>
      <link href="2020/03/18/HQL%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
      <url>2020/03/18/HQL%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="行转列过程中"><a href="#行转列过程中" class="headerlink" title="行转列过程中"></a>行转列过程中</h3><p>分组的时候只写了group，忘记了by</p><p>子查询不能写分号</p><h3 id="列名错误："><a href="#列名错误：" class="headerlink" title="列名错误："></a><strong>列名错误：</strong></h3><pre class="line-numbers language-none"><code class="language-none">Error: Error while compiling statement: FAILED: SemanticException [Error 10004]: Line 3:6 Invalid table alias or column reference 'orderdata': (possible column names are: name, orderdate, cost) (state=42000,code=10004)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简介</title>
      <link href="2020/03/18/%E7%AE%80%E4%BB%8B/"/>
      <url>2020/03/18/%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="教育"><a href="#教育" class="headerlink" title="教育"></a>教育</h1><p>2017.09.09 - 2021.06.06</p><ul><li><p>郑州轻工业大学</p></li><li><p>本科 计算机科学与技术</p></li><li><p>ACM集训队成员</p></li></ul><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>数据的离线数据处理和实时处理</p><p>hadoop,  spark,linux, scala</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>github：<a href="https://www.github.com/kiedeng">github</a></p><p>QQ:572245955</p>]]></content>
      
      
      <categories>
          
          <category> 成长 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongdb导入json文件</title>
      <link href="2020/03/18/mongdb%E5%AF%BC%E5%85%A5json%E6%96%87%E4%BB%B6/"/>
      <url>2020/03/18/mongdb%E5%AF%BC%E5%85%A5json%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装mongdb"><a href="#1-安装mongdb" class="headerlink" title="1 安装mongdb"></a>1 安装mongdb</h2><p>使用宝塔安装mongdb</p><h2 id="2-配置mongdb"><a href="#2-配置mongdb" class="headerlink" title="2 配置mongdb"></a>2 配置mongdb</h2><p><img src="https://kiedeng.site/usr/uploads/2020/03/962950381.jpg" alt="配置.jpg"></p><p>注：开放27017端口</p><h2 id="3-导入数据"><a href="#3-导入数据" class="headerlink" title="3 导入数据"></a>3 导入数据</h2><p>mongoimport –db mall –collection userData –file /Users/yeo/Desktop/userdata.json</p><p>注：执行命令在/www/server/mongodb/bin</p>]]></content>
      
      
      <categories>
          
          <category> mongdb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hive使用mysql编码问题</title>
      <link href="2020/03/17/hive%E4%BD%BF%E7%94%A8mysql%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>2020/03/17/hive%E4%BD%BF%E7%94%A8mysql%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="修改my-cnf文件"><a href="#修改my-cnf文件" class="headerlink" title="修改my.cnf文件"></a>修改my.cnf文件</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"># 添加init_connect='SET collation_connection = utf8_unicode_ci'init_connect='SET NAMES utf8'character-set-server=utf8collation-server=utf8_unicode_ciskip-character-set-client-handshake<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启mysql</p><p>启动使用bin/hive脚本</p><h2 id="修改metastore数据库"><a href="#修改metastore数据库" class="headerlink" title="修改metastore数据库"></a>修改metastore数据库</h2><pre class="line-numbers language-none"><code class="language-none">show variables like 'char%';show variables like "colla%";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用上面两个命令，查看是否都为utf8的编码，（除character_set _filesystem为binary）</p><p>如果没有：则</p><pre class="line-numbers language-none"><code class="language-none">修改表字段注解和表注解alter table COLUMNS_V2 modify column COMMENT varchar(256) character set utf8;alter table TABLE_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;修改分区字段注解：alter table PARTITION_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;alter table PARTITION_KEYS modify column PKEY_COMMENT varchar(4000) character set utf8;修改索引注解：alter table INDEX_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以显示中文字符的，不过在hive中插入中文字符还有些问题，只能显示上传文档为中文字符和描述为中文字符的情况</p>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql安装</title>
      <link href="2020/03/16/mysql%E5%AE%89%E8%A3%85/"/>
      <url>2020/03/16/mysql%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="检查是否安装Mysql"><a href="#检查是否安装Mysql" class="headerlink" title="检查是否安装Mysql"></a>检查是否安装Mysql</h2><pre class="line-numbers language-none"><code class="language-none">rpm -qa|grep mysql; // 查询是否存在mysqlrpm -e --nodeps mysql-libs; // 卸载mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>rpm 是一个包管理工具</p><p>-e 卸载程序</p><p>-qa 查询安装的软件</p><p>–nodeps 不验证软件包的依赖</p><p>-i ,–install 安装软件包</p><p>-v， –verbose 提供更多的详细信息输出</p><p>-h ，–hash 软件包安装的时候列出哈希标记</p></blockquote><h2 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h2><pre class="line-numbers language-none"><code class="language-none">tar -xf mysql-5.7.28-1.el6.x86_64.rpm-bundle.tar // 解压// 安装[root@hadoop102 software]$ rpm -ivh mysql-community-common-5.7.28-1.el6.x86_64.rpm[root@hadoop102 software]$ rpm -ivh mysql-community-libs-5.7.28-1.el6.x86_64.rpm[root@hadoop102 software]$ rpm -ivh mysql-community-client-5.7.28-1.el6.x86_64.rpm[root@hadoop102 software]$ rpm -ivh mysql-community-server-5.7.28-1.el6.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改-etc-my-cnf"><a href="#修改-etc-my-cnf" class="headerlink" title="修改/etc/my.cnf"></a>修改/etc/my.cnf</h2><pre class="line-numbers language-none"><code class="language-none">[mysqld]explicit_defaults_for_timestamp=true  //显示指定默认值为timestamp类型的字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除/etc/my.cnf文件中datadir指向的目录下的所有内容:</p><h2 id="启动Mysql"><a href="#启动Mysql" class="headerlink" title="启动Mysql"></a>启动Mysql</h2><pre class="line-numbers language-none"><code class="language-none">// 初始化mysqld --initialize --user=mysql// 查看临时密码cat /var/log/mysqld.log // 启动mysql服务service mysqld start// 登陆mysql mysql -uroot -pEnter password:// 修改密码set password = password("新密码")// 修改root用户支持任意IP连接（在user表中）update user set host= ‘%’ where  user = ‘root’;flush privileges ; // 刷新配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop_HA高可用</title>
      <link href="2020/03/08/Hadoop-HA%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
      <url>2020/03/08/Hadoop-HA%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>包括HDFS的HA和YARN的HA</p><h2 id="HDFS-HA的工作机制"><a href="#HDFS-HA的工作机制" class="headerlink" title="HDFS-HA的工作机制"></a>HDFS-HA的工作机制</h2><p>​    通过双NameNode消除单节点故障</p><h2 id="手动故障转移"><a href="#手动故障转移" class="headerlink" title="手动故障转移"></a>手动故障转移</h2><p>配置：在opt目录下创建ha文件夹，将hadoop复制到ha文件夹下</p><p>配置hadoop-env.sh</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/opt/module/jdk1.8.0_144<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置core-site.xml</p><pre class="line-numbers language-none"><code class="language-none">&lt;configuration&gt;&lt;!-- 把两个NameNode）的地址组装成一个集群mycluster --&gt;&lt;property&gt;&lt;name&gt;fs.defaultFS&lt;/name&gt;        &lt;value&gt;hdfs://mycluster&lt;/value&gt;&lt;/property&gt;   &lt;!-- 声明journalnode服务器存储目录--&gt;&lt;property&gt;&lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;&lt;value&gt;/opt/ha/hadoop-2.7.2/data/jn&lt;/value&gt;&lt;/property&gt;&lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;&lt;property&gt;&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;&lt;value&gt;/opt/ha/hadoop-2.7.2/data/tmp&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置hdfs-site.xml</p><pre class="line-numbers language-none"><code class="language-none">&lt;configuration&gt;&lt;!-- 完全分布式集群名称 --&gt;&lt;property&gt;&lt;name&gt;dfs.nameservices&lt;/name&gt;&lt;value&gt;mycluster&lt;/value&gt;&lt;/property&gt;&lt;!-- 集群中NameNode节点都有哪些 --&gt;&lt;property&gt;&lt;name&gt;dfs.ha.namenodes.mycluster&lt;/name&gt;&lt;value&gt;nn1,nn2&lt;/value&gt;&lt;/property&gt;&lt;!-- nn1的RPC通信地址 --&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.rpc-address.mycluster.nn1&lt;/name&gt;&lt;value&gt;hadoop102:9000&lt;/value&gt;&lt;/property&gt;&lt;!-- nn2的RPC通信地址 --&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.rpc-address.mycluster.nn2&lt;/name&gt;&lt;value&gt;hadoop103:9000&lt;/value&gt;&lt;/property&gt;&lt;!-- nn1的http通信地址 --&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.http-address.mycluster.nn1&lt;/name&gt;&lt;value&gt;hadoop102:50070&lt;/value&gt;&lt;/property&gt;&lt;!-- nn2的http通信地址 --&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.http-address.mycluster.nn2&lt;/name&gt;&lt;value&gt;hadoop103:50070&lt;/value&gt;&lt;/property&gt;&lt;!-- 指定NameNode元数据在JournalNode上的存放位置 --&gt;&lt;property&gt;&lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;&lt;value&gt;qjournal://hadoop102:8485;hadoop103:8485;hadoop104:8485/mycluster&lt;/value&gt;&lt;/property&gt;&lt;!-- 配置隔离机制，即同一时刻只能有一台服务器对外响应 --&gt;&lt;property&gt;&lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;&lt;value&gt;sshfence&lt;/value&gt;&lt;/property&gt;&lt;!-- 使用隔离机制时需要ssh无秘钥登录--&gt;&lt;property&gt;&lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;&lt;value&gt;/home/atguigu/.ssh/id_rsa&lt;/value&gt;&lt;/property&gt;&lt;!-- 关闭权限检查--&gt;&lt;property&gt;&lt;name&gt;dfs.permissions.enable&lt;/name&gt;&lt;value&gt;false&lt;/value&gt;&lt;/property&gt;&lt;!-- 访问代理类：client，mycluster，active配置失败自动切换实现方式--&gt;&lt;property&gt;  &lt;name&gt;dfs.client.failover.proxy.provider.mycluster&lt;/name&gt;&lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拷贝到其他节点</p><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><ol><li>各个集群启动JournalNode节点</li></ol><pre class="line-numbers language-none"><code class="language-none">sbin/hadoop-daemon.sh start journalnode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>在[nn1]上，对其格式化，并启动</li></ol><pre class="line-numbers language-none"><code class="language-none">bin/hdfs namenode -formatsbin/hadoop-daemon.sh start namenode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>在[nn2]上，同步nn1的元数据信息</li></ol><pre class="line-numbers language-none"><code class="language-none">bin/hdfs namenode -bootstrapStandby<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>启动[nn2]</li></ol><pre class="line-numbers language-none"><code class="language-none">sbin/hadoop-daemon.sh start namenode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>将[nn1]切换为Active</li></ol><pre class="line-numbers language-none"><code class="language-none">bin/hdfs haadmin -transitionToActive nn1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>启动datanode</li></ol><pre class="line-numbers language-none"><code class="language-none">sbin/hadoop-daemons.sh start datanode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>查看是否Active</li></ol><pre class="line-numbers language-none"><code class="language-none">bin/hdfs haadmin -getServiceState nn1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="自动故障转移"><a href="#自动故障转移" class="headerlink" title="自动故障转移"></a>自动故障转移</h2><p>具体配置</p><p>（1）在hdfs-site.xml中增加</p><pre class="line-numbers language-none"><code class="language-none">&lt;property&gt;&lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在core-site.xml文件中增加</p><pre class="line-numbers language-none"><code class="language-none">&lt;property&gt;&lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;&lt;value&gt;hadoop102:2181,hadoop103:2181,hadoop104:2181&lt;/value&gt;&lt;/property&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动</p><p>（1）关闭所有HDFS服务：sbin/stop-dfs.sh</p><p>（2）启动Zookeeper集群：bin/zkServer.sh start</p><p>（3）初始化HA在Zookeeper中状态：bin/hdfs zkfc -formatZK</p><p>（4）启动HDFS服务：sbin/start-dfs.sh</p><p>集群规划：</p><table><thead><tr><th>hadoop102</th><th>hadoop103</th><th>hadoop104</th></tr></thead><tbody><tr><td>NameNode</td><td>NameNode</td><td></td></tr><tr><td>ZKFC</td><td>ZKFC</td><td></td></tr><tr><td>JournalNode</td><td>JournalNode</td><td>JournalNode</td></tr><tr><td>DataNode</td><td>DataNode</td><td>DataNode</td></tr><tr><td>ZK</td><td>ZK</td><td>ZK</td></tr><tr><td></td><td>ResourceManager</td><td></td></tr><tr><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr></tbody></table><h2 id="YARN-HA配置"><a href="#YARN-HA配置" class="headerlink" title="YARN-HA配置"></a>YARN-HA配置</h2><p>yarn-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--启用resourcemanager ha--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.ha.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!--声明两台resourcemanager的地址--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.cluster-id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>cluster-yarn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.ha.rm-ids<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>rm1,rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.hostname.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop102<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.hostname.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop103<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!--指定zookeeper集群的地址--&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.zk-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop102:2181,hadoop103:2181,hadoop104:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--启用自动恢复--&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.recovery.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!--指定resourcemanager的状态信息存储在zookeeper集群--&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.store.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动YARN</p><p>（1）在hadoop102中执行：sbin/start-yarn.sh</p><p>（2）在hadoop103中执行：sbin/yarn-daemon.sh start resourcemanager</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本文件</title>
      <link href="2020/03/08/shell%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6/"/>
      <url>2020/03/08/shell%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="myjps"><a href="#myjps" class="headerlink" title="myjps"></a>myjps</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bashfor i in hadoop102 hadoop103 hadoop104do    echo "************* $i Jps ***********"    ssh $i /opt/module/jdk1.8.0_144/bin/jpsdone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="zookeeper集群管理脚本"><a href="#zookeeper集群管理脚本" class="headerlink" title="zookeeper集群管理脚本"></a>zookeeper集群管理脚本</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bashif [ $# -eq 0 ]then    echo "No args Input...."fifor i in hadoop102 hadoop103 hadoop104do    case $1 in    "start")        echo "*****************Start $i Zookeeper *************"        ssh $i /opt/module/zookeeper-3.4.10/bin/zkServer.sh start    ;;    "stop")                echo "*****************Stop $i Zookeeper *************"                ssh $i /opt/module/zookeeper-3.4.10/bin/zkServer.sh stop        ;;    "status")                echo "*****************Status $i Zookeeper *************"                ssh $i /opt/module/zookeeper-3.4.10/bin/zkServer.sh status        ;;    *)        echo "Input Args Error......"    esacdone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件同步脚本"><a href="#文件同步脚本" class="headerlink" title="文件同步脚本"></a>文件同步脚本</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bash#1 获取输入参数个数，如果没有参数，直接退出pcount=$#if((pcount==0)); thenecho no args;exit;fi#2 获取文件名称p1=$1fname=`basename $p1`echo fname=$fname#3 获取上级目录到绝对路径pdir=`cd -P $(dirname $p1); pwd`echo pdir=$pdir#4 获取当前用户名称user=`whoami`#5 循环for((host=103; host&lt;105; host++)); do        echo ------------------- hadoop$host --------------        rsync -rvl $pdir/$fname $user@hadoop$host:$pdirdone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell操作</title>
      <link href="2020/03/07/shell%E6%93%8D%E4%BD%9C/"/>
      <url>2020/03/07/shell%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>更改权限：chmod 777 [sh文件]</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>案例：创建文件，写入数据</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/bashcd /home/atguigu/zzulitouch chuang.txtecho "kangdong" &gt;&gt; chuang.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Shell中的变量"><a href="#Shell中的变量" class="headerlink" title="Shell中的变量"></a>Shell中的变量</h2><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$HOME,$PWD,$SHELL,$USER等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>全局变量：export A</p><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>撤销变量：unset 变量</p><p>声明静态变量：readonly变量，注意：不能unset</p><h3 id="特殊变量-n"><a href="#特殊变量-n" class="headerlink" title="特殊变量:$ n"></a>特殊变量:$ n</h3><p>$n  （功能描述：n为数字，$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）</p><h3 id="特殊变量："><a href="#特殊变量：" class="headerlink" title="特殊变量：$"></a>特殊变量：$</h3><p>获取所有输入参数个数，常用于循环</p><h3 id="特殊变量：-、"><a href="#特殊变量：-、" class="headerlink" title="特殊变量：$ *、$ @"></a>特殊变量：$ *、$ @</h3><p>​    $ *  （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）</p><p>​    $ @ （功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待）</p><h3 id="特殊变量：-1"><a href="#特殊变量：-1" class="headerlink" title="特殊变量：$ ?"></a>特殊变量：$ ?</h3><p>判断最后一次执行的命令的返回状态，0位成功，非0为失败</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ol><li><p>“$ ((运算式))”或“$[运算式]”</p></li><li><p>expr  + , - , *, /, %  加，减，乘，除，取余</p></li></ol><p>注意：expr运算符间要有空格</p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>格式：[condition]</p><p>判断条件：</p><ol><li><p>两个整数比较</p><p>-lt 小于（less than）    -le 小于或等于（less equal）</p><p>-eq等于（equal）        -gt大于（greater than）</p><p>-ge大于等于（greater equal）    -ne不等于（Not equal）</p></li><li><p>按照文件权限进行判断</p><p>-r 读    -w写    -x 执行（execute）</p></li><li><p>按照文件类型进行判断</p><p>-f 文件存在并且是一个常规文件</p><p>-e 文件存在 -d为目录</p></li></ol><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="1-if判断"><a href="#1-if判断" class="headerlink" title="1 if判断"></a>1 if判断</h3><pre class="line-numbers language-none"><code class="language-none">#!/bin/bashif [ $1 -eq "2" ]then        echo "2"elif [ $1 -eq "3" ]then        echo "3"fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-case语句"><a href="#2-case语句" class="headerlink" title="2 case语句"></a>2 case语句</h3><p>注意事项：</p><ol><li><p>   case行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。</p></li><li><p>   双分号“**;;**”表示命令序列结束，相当于java中的break。</p></li><li><p>   最后的“*）”表示默认模式，相当于java中的default。</p></li></ol><p>案例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bashcase $1 in"1")        echo "1 kangdong";;"2")        echo "2 kangdong";;"3")        echo "3 kangdong";;*)        echo "* kangdong";;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3 for循环"></a>3 for循环</h3><pre class="line-numbers language-none"><code class="language-none">#/bin/bashs=0for((i=0;i&lt;=100;i++))do        s=$[$s+$i]doneecho $s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-比较-与"><a href="#4-比较-与" class="headerlink" title="4 比较$ *与$ @"></a>4 比较$ *与$ @</h3><p>未被双引号包含时，都分开输出，当被双引号包含时，“$*”会将所有参数作为一个整体输出</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bashfor i in "$*"do        echo "I am $i"donefor i in "$@"do        echo "My name $i"done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-while循环"><a href="#5-while循环" class="headerlink" title="5 while循环"></a>5 while循环</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bashs=0i=0while [ $i -le 100 ]do        s=$[$i+$s]        i=$[$i+1]doneecho $s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h2><p>read(选项)(参数)</p><p>​    选项：</p><p>-p：指定读取值时的提示符；</p><p>-t：指定读取值时等待的时间（秒）。</p><p>参数</p><p>​    变量：指定读取值的变量名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">read -t 9 -p "输入值:" nameecho $name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="1-系统函数"><a href="#1-系统函数" class="headerlink" title="1 系统函数"></a>1 系统函数</h3><p><strong>basename [string / pathname] [suffix]</strong>     求文件名</p><p><strong>dirname</strong> ：求文件的目录</p><h3 id="2-自定义函数"><a href="#2-自定义函数" class="headerlink" title="2 自定义函数"></a>2 自定义函数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bashfunction sum(){        s=0        s=$[$1+$2]        echo $s}read -p "输入s1：" n1;read -p "输入s2: " n2;sum $n1 $n2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Shell工具"><a href="#Shell工具" class="headerlink" title="Shell工具"></a>Shell工具</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><p>cut [选项参数] filename</p><p>-f 列号    -d 分隔符</p><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><h2 id="企业真实面试题（重点）"><a href="#企业真实面试题（重点）" class="headerlink" title="企业真实面试题（重点）"></a>企业真实面试题（重点）</h2><p>《未完，，待续》</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="2020/03/04/Zookeeper/"/>
      <url>2020/03/04/Zookeeper/</url>
      
        <content type="html"><![CDATA[<p>​    Zookeeper是一个开源的分布式的，为分布式应用提供协调服务的Apache项目。多作为集群提供服务的中间件。</p><p>​    Zookeeper从设计模式角度来理解，是一个基于观察者模式设计的分布式服务管理框架。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>​    提供的服务包括：统一命名服务，统一配置管理，统一集群管理，服务器节点动态上下线，软负载均衡等。</p><h4 id="1-统一命名服务"><a href="#1-统一命名服务" class="headerlink" title="1 统一命名服务"></a>1 统一命名服务</h4><p>​    在分布式环境下，经常需要对应用/服务进行统一命名，便于识别。</p><h4 id="2-统一配置管理"><a href="#2-统一配置管理" class="headerlink" title="2 统一配置管理"></a>2 统一配置管理</h4><p>​    1）分布式环境下，配置文件同步非常常见</p><p>​    2）配置管理可交由ZooKeeper实现</p><h4 id="3-统一集群管理"><a href="#3-统一集群管理" class="headerlink" title="3 统一集群管理"></a>3 统一集群管理</h4><p>​    1）分布式环境下，实时掌握节点的状态是必要的</p><p>​    2）ZooKeeper可以实现实时监控节点状态变化</p><h4 id="4-服务器动态上下线"><a href="#4-服务器动态上下线" class="headerlink" title="4 服务器动态上下线"></a>4 服务器动态上下线</h4><p>​    客户端能实时洞察服务器上下线的变化</p><h4 id="5-软负载均衡"><a href="#5-软负载均衡" class="headerlink" title="5 软负载均衡"></a>5 软负载均衡</h4><p>​    在Zookeeper中记录每台服务器的访问数，让访问数最少的服务器去处理最新的客户端请求</p><h2 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h2><h3 id="本地模式安装部署"><a href="#本地模式安装部署" class="headerlink" title="本地模式安装部署"></a>本地模式安装部署</h3><h5 id="1-安装jdk，拷贝Zookeeper，解压到指定目录"><a href="#1-安装jdk，拷贝Zookeeper，解压到指定目录" class="headerlink" title="1 安装jdk，拷贝Zookeeper，解压到指定目录"></a>1 安装jdk，拷贝Zookeeper，解压到指定目录</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[atguigu@hadoop102 software]$ tar -zxvf zookeeper-3.4.10.tar.gz -C /opt/module/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-配置修改"><a href="#2-配置修改" class="headerlink" title="2 配置修改"></a>2 配置修改</h5><ul><li>将conf路径下的zoo_sample.cfg修改为zoo.cfg</li><li>修改dataDir路径，改为：dataDir=/opt/module/zookeeper-3.4.10/zkData</li><li>创建zkDataa文件夹</li></ul><h5 id="3-操作Zookeeper"><a href="#3-操作Zookeeper" class="headerlink" title="3 操作Zookeeper"></a>3 操作Zookeeper</h5><ol><li>启动：bin/zkServer.sh start</li><li>查看进程是否启动：jps</li><li>查看状态：bin/zkServer.sh status</li><li>启动客户端：bin/zkCli.sh</li><li>退出：quit</li><li>停止：bin/zkServer.sh stop</li></ol><h2 id="四字命令"><a href="#四字命令" class="headerlink" title="四字命令"></a>四字命令</h2><table><thead><tr><th>ruok</th><th>测试服务是否处于正确状态，如果确实如此，那么服务返回 imok ,否则不做任何响应。</th></tr></thead><tbody><tr><td>conf</td><td>3.3.0版本引入的，打印出服务相关配置的详细信息</td></tr><tr><td>cons</td><td>列出所有连接到这台服务器的客户端全部会话详细信息。包括 接收/发送的包数量，会话id，操作延迟、最后的操作执行等等信息</td></tr><tr><td>crst</td><td>重置所有连接的连接和会话统计信息</td></tr><tr><td>dump</td><td>列出那些比较重要的会话和临时节点。这个命令只能在leader节点上有用</td></tr><tr><td>envi</td><td>打印出服务环境的详细信息</td></tr></tbody></table><p> 命令格式：nc localhost 2181</p><p>注: 使用之前，需要先安装nc，可以使用yum方式进行安装.</p><h2 id="配置参数解读"><a href="#配置参数解读" class="headerlink" title="配置参数解读"></a>配置参数解读</h2><p>zoo.cfg参数含义：</p><ol><li>tickTime：通信心跳数，Zookeeper服务器与客户端心跳时间，单位</li><li>initLimit=10:LF初始通信时限（第一次连接的超时时间）</li><li>syncLimit=5：LF同步通信时限（最大响应时间单位）</li><li>clientPort=2181：客户端连接端口</li></ol><h2 id="Zookeeper内容原理"><a href="#Zookeeper内容原理" class="headerlink" title="Zookeeper内容原理"></a>Zookeeper内容原理</h2><h3 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h3><p>半数机制：集群中半数以上机器存活，集群可用。</p><p>Zookeeper虽然在配置中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，Leader是通过内部的选举机制临时产生的。</p><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><p>持久：客户端和服务器断开连接后，创建的节点不删除</p><p>短暂：客户端和服务器断开连接后，创建的节点自己删除</p><h3 id="监听器原理"><a href="#监听器原理" class="headerlink" title="监听器原理"></a>监听器原理</h3><p>监听器原理详解：</p><ol><li>首先要有一个main（）线程</li><li>创建Zookeeper客户端，两个线程，一个负责网络连接通信（connect），一个负责监听（listener）</li><li>通过connect线程将注册的监听事件发送给Zookeeper。</li><li>在Zookeeper的注册监听器列表将注册的监听事件添加到列表中</li><li>监听数据或路径变化，就会将这个消息发送给listener线程</li><li>listener线程内部调用了process（）方法</li></ol><h3 id="写数据流程"><a href="#写数据流程" class="headerlink" title="写数据流程"></a>写数据流程</h3><ol><li>Client发送一个写请求</li><li>如果Server不是Leader，在转给Leader，请求广播给各个Server</li><li>当Leader收到大多数Server数据写成功了，就说明数据写成功了</li><li>server通知Client数据写成功了</li></ol><h2 id="Zookeeper实战"><a href="#Zookeeper实战" class="headerlink" title="Zookeeper实战"></a>Zookeeper实战</h2><h3 id="1-集群规划"><a href="#1-集群规划" class="headerlink" title="1 集群规划"></a>1 集群规划</h3><p>在hadoop102,103,104三个节点上部署Zookeeper</p><h3 id="2-解压安装"><a href="#2-解压安装" class="headerlink" title="2 解压安装"></a>2 解压安装</h3><p>（1）解压到/opt/module目录下</p><p>（2）同步到hadoop103,104</p><h3 id="3-配置服务器编号"><a href="#3-配置服务器编号" class="headerlink" title="3 配置服务器编号"></a>3 配置服务器编号</h3><p>（1）在zookeeper目录下创建zkData</p><p>（2）在zkData目录下创建一个myid的文件</p><p>（3）编写myid文件，添加编号</p><p>（4）拷贝配置好的zookeeper到其他机器上</p><h3 id="4-配置zoo-cfg文件"><a href="#4-配置zoo-cfg文件" class="headerlink" title="4 配置zoo.cfg文件"></a>4 配置zoo.cfg文件</h3><p>（1）重命名zoo_sample.cfg为zoo.cfg</p><p>（2）打开zoo.cfg文件</p><p>修改数据存储路径配置，添加配置</p><pre class="line-numbers language-none"><code class="language-none">#######################cluster##########################server.2=hadoop102:2888:3888server.3=hadoop103:2888:3888server.4=hadoop104:2888:3888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（3）同步zoo.cfg配置文件</p><p>（4）配置参数解读：  server.A=B:C:D</p><p>A是一个数字，代表这个是几号服务器</p><p>B是这个服务器的ip地址</p><p>C是这个服务器与集群中的Leader服务器交换信息的端口</p><p>D是集群服务器挂了，此端口执行服务器相互通信端口</p><h3 id="5-集群操作"><a href="#5-集群操作" class="headerlink" title="5 集群操作"></a>5 集群操作</h3><p>（1）分别启动Zookeeper：bin/zkServer.sh start</p><p>（2）查看状态：bin/zkServer.sh status</p><h2 id="客户端命令行操作"><a href="#客户端命令行操作" class="headerlink" title="客户端命令行操作"></a>客户端命令行操作</h2><table><thead><tr><th>命令基本语法</th><th>功能描述</th></tr></thead><tbody><tr><td>help</td><td>显示所有操作命令</td></tr><tr><td>ls path [watch]</td><td>使用 ls 命令来查看当前znode中所包含的内容</td></tr><tr><td>ls2 path  [watch]</td><td>查看当前节点数据并能看到更新次数等数据</td></tr><tr><td>create</td><td>普通创建  -s 含有序列  -e 临时（重启或者超时消失）</td></tr><tr><td>get path  [watch]</td><td>获得节点的值</td></tr><tr><td>set</td><td>设置节点的具体值</td></tr><tr><td>stat</td><td>查看节点状态</td></tr><tr><td>delete</td><td>删除节点</td></tr><tr><td>rmr</td><td>递归删除节点</td></tr></tbody></table><ol><li>启动客户端：bin/zkCli.sh</li><li>创短暂节点：create -e /sanguo “zhouyu”</li><li>创建带序号的节点：create -s /sanguo “kang”</li><li>监听节点数据：get /sang watch</li><li>监听节点数目：ls /sanguo watch</li><li>删除节点：delete</li><li>rmr /san</li><li>查看节点状态：stat /san</li></ol><h2 id="API应用"><a href="#API应用" class="headerlink" title="API应用"></a>API应用</h2><p>pom文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>log4j.properties文件</p><p>需要在项目的src/main/resources目录下，新建一个文件，命名为“log4j.properties”，在文件中填入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">log4j.rootLogger=INFO, stdout  log4j.appender.stdout=org.apache.log4j.ConsoleAppender  log4j.appender.stdout.layout=org.apache.log4j.PatternLayout  log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n  log4j.appender.logfile=org.apache.log4j.FileAppender  log4j.appender.logfile.File=target/spring.log  log4j.appender.logfile.layout=org.apache.log4j.PatternLayout  log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建Zookeeper客户端"><a href="#创建Zookeeper客户端" class="headerlink" title="创建Zookeeper客户端"></a>创建Zookeeper客户端</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> connectString <span class="token operator">=</span> <span class="token string">"hadoop102:2181,hadoop103:2181,hadoop104:2181"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> sessionTimeout <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ZooKeeper</span> zkClient <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Before</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>zkClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>connectString<span class="token punctuation">,</span> sessionTimeout<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 收到事件通知后的回调函数（用户的业务逻辑）</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 再次启动监听</span><span class="token keyword">try</span> <span class="token punctuation">{</span>zkClient<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建子节点"><a href="#创建子节点" class="headerlink" title="创建子节点"></a>创建子节点</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建子节点</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token comment">// 参数1：要创建的节点的路径； 参数2：节点数据 ； 参数3：节点权限 ；参数4：节点的类型</span><span class="token class-name">String</span> nodeCreated <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">,</span> <span class="token string">"jinlian"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Ids</span><span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> <span class="token class-name">CreateMode</span><span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取子节点并监听节点变化"><a href="#获取子节点并监听节点变化" class="headerlink" title="获取子节点并监听节点变化"></a>获取子节点并监听节点变化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取子节点</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> child <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 延时阻塞</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断Znode是否存在"><a href="#判断Znode是否存在" class="headerlink" title="判断Znode是否存在"></a>判断Znode是否存在</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断znode是否存在</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">Stat</span> stat <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"/eclipse"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stat <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">"not exist"</span> <span class="token operator">:</span> <span class="token string">"exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="监听服务器节点动态上下线案例"><a href="#监听服务器节点动态上下线案例" class="headerlink" title="监听服务器节点动态上下线案例"></a>监听服务器节点动态上下线案例</h3><p>需求：某分布式系统中，主节点可以有多台，可以动态上下线，任意一台客户端都能实时感知到主节点服务器的上下线。</p><ol><li><p>先在集群上创建/servers节点</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[zk: localhost:2181(CONNECTED) 10] create /servers "servers"Created /servers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>服务器端注册代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>zookeeper1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span></span><span class="token class-name">CreateMode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span></span><span class="token class-name">KeeperException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span></span><span class="token class-name">WatchedEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span></span><span class="token class-name">Watcher</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span></span><span class="token class-name">ZooDefs<span class="token punctuation">.</span>Ids</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span></span><span class="token class-name">ZooKeeper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributeServer</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">DistributeServer</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistributeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 连接zookeepeer集群</span>server<span class="token punctuation">.</span><span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 注册节点</span>server<span class="token punctuation">.</span><span class="token function">regist</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 业务逻辑处理</span>server<span class="token punctuation">.</span><span class="token function">business</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">business</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token class-name">String</span> hostname<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">KeeperException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">String</span> path <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/servers/server"</span><span class="token punctuation">,</span> hostname<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Ids</span><span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> <span class="token class-name">CreateMode</span><span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hostname <span class="token operator">+</span><span class="token string">"is online!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">String</span> connectString<span class="token operator">=</span><span class="token string">"hadoop102:2181,hadoop103:2181,hadoop104:2181"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> sessionTimeout<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ZooKeeper</span> zkClient<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>zkClient<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>connectString<span class="token punctuation">,</span> sessionTimeout<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>客户端代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>zookeeper1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span></span><span class="token class-name">KeeperException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span></span><span class="token class-name">WatchedEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span></span><span class="token class-name">Watcher</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span></span><span class="token class-name">ZooKeeper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributeClient</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token comment">// 1 获取zookeeper集群连接</span><span class="token class-name">DistributeClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistributeClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 注册监听</span>client<span class="token punctuation">.</span><span class="token function">getChlidren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 业务逻辑处理</span>client<span class="token punctuation">.</span><span class="token function">business</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">business</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getChlidren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">KeeperException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token string">"/servers"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hosts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> child <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"/servers/"</span><span class="token operator">+</span>child<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hosts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hosts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">String</span> connectString<span class="token operator">=</span><span class="token string">"hadoop102:2181,hadoop103:2181,hadoop104:2181"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> sessionTimeout<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ZooKeeper</span> zkClient<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span>zkClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>connectString<span class="token punctuation">,</span> sessionTimeout<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token function">getChlidren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeeperException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated catch block</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated catch block</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated catch block</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据压缩</title>
      <link href="2020/03/01/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/"/>
      <url>2020/03/01/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1 概念："></a>1 概念：</h2><p>​    压缩技术能够有效减少底层存储系统读写字节数。在运行MR程序是，I/O操作，网络数据传输，Shuffle和Merge要花大量的时间</p><p>​    压缩是提高Hadoop运行效率的一种优化策略</p><p>​    注：运行密集型的job，少用压缩；IO密集型的job，多用压缩</p><h2 id="2-MR支持的压缩编码"><a href="#2-MR支持的压缩编码" class="headerlink" title="2 MR支持的压缩编码"></a>2 MR支持的压缩编码</h2><table><thead><tr><th>压缩格式</th><th>hadoop自带？</th><th>算法</th><th>文件扩展名</th><th>是否可切分</th><th>换成压缩格式后，原来的程序是否需要修改</th></tr></thead><tbody><tr><td>DEFLATE</td><td>是，直接使用</td><td>DEFLATE</td><td>.deflate</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>Gzip</td><td>是，直接使用</td><td>DEFLATE</td><td>.gz</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>bzip2</td><td>是，直接使用</td><td>bzip2</td><td>.bz2</td><td>是</td><td>和文本处理一样，不需要修改</td></tr><tr><td>LZO</td><td>否，需要安装</td><td>LZO</td><td>.lzo</td><td>是</td><td>需要建索引，还需要指定输入格式</td></tr><tr><td>Snappy</td><td>否，需要安装</td><td>Snappy</td><td>.snappy</td><td>否</td><td>和文本处理一样，不需要修改</td></tr></tbody></table><p>Hadoop引入了编码/解码器，如：</p><table><thead><tr><th>压缩格式</th><th>对应的编码/解码器</th></tr></thead><tbody><tr><td>DEFLATE</td><td>org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td>gzip</td><td>org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td>bzip2</td><td>org.apache.hadoop.io.compress.BZip2Codec</td></tr><tr><td>LZO</td><td>com.hadoop.compression.lzo.LzopCodec</td></tr><tr><td>Snappy</td><td>org.apache.hadoop.io.compress.SnappyCodec</td></tr></tbody></table><h2 id="3-压缩方式选择"><a href="#3-压缩方式选择" class="headerlink" title="3 压缩方式选择"></a>3 压缩方式选择</h2><h3 id="Gzip压缩"><a href="#Gzip压缩" class="headerlink" title="Gzip压缩"></a>Gzip压缩</h3><p>优点：压缩率比较高，压缩速度比较快，本身支持，在应用中处理Gzip格式的文件和直接处理文本一样，大部分Linux系统自带；</p><p>缺点：不支持Split</p><p>应用场景：一个块大小内的数据，比如一天或者一个小时的日志信息</p><h3 id="Bzip2压缩"><a href="#Bzip2压缩" class="headerlink" title="Bzip2压缩"></a>Bzip2压缩</h3><p>优点：支持Split，具有很高的压缩率，比Gzip压缩率要高，自带，使用方便</p><p>缺点：压缩/解压速度比较慢</p><p>应用场景：适合对速度要求不高，但需要很高压缩率的时候；</p><h3 id="Lzo压缩"><a href="#Lzo压缩" class="headerlink" title="Lzo压缩"></a>Lzo压缩</h3><p>优点：压缩/解压速度比较快，合理的压缩率；支持Split,是Hadoop中最流行的压缩格式；</p><p>缺点：压缩率比Gzip低一些；需要安装，为了支持Split需要建索引，还需要指令InputFormat为Lzo格式</p><p>应用场景：一个很大的文件，压缩之后还大于200M以上的可以考虑，而且单个文件越大，Lzo优点越明显</p><h3 id="Snappy压缩"><a href="#Snappy压缩" class="headerlink" title="Snappy压缩"></a>Snappy压缩</h3><p>优点：高速压缩速度和合理的压缩率</p><p>缺点：不支持Split</p><p>应用场景：Map输出数据比较大的时候，作为Map到Reduce的中间数据的压缩格式；或者MapReduce的输出和另外一个MapReduce的输入</p><h2 id="4-压缩位置选择"><a href="#4-压缩位置选择" class="headerlink" title="4 压缩位置选择"></a>4 压缩位置选择</h2><p>1 输入端采用压缩</p><p>2 Mapper输出采用压缩</p><p>3 Reduce输出采用压缩</p><h2 id="5-压缩参数配置"><a href="#5-压缩参数配置" class="headerlink" title="5 压缩参数配置"></a>5 压缩参数配置</h2><table><thead><tr><th>参数</th><th>默认值</th><th>阶段</th><th>建议</th></tr></thead><tbody><tr><td>io.compression.codecs    （在core-site.xml中配置）</td><td>org.apache.hadoop.io.compress.DefaultCodec,  org.apache.hadoop.io.compress.GzipCodec,  org.apache.hadoop.io.compress.BZip2Codec</td><td>输入压缩</td><td>Hadoop使用文件扩展名判断是否支持某种编解码器</td></tr><tr><td>mapreduce.map.output.compress（在mapred-site.xml中配置）</td><td>false</td><td>mapper输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.map.output.compress.codec（在mapred-site.xml中配置）</td><td>org.apache.hadoop.io.compress.DefaultCodec</td><td>mapper输出</td><td>企业多使用LZO或Snappy编解码器在此阶段压缩数据</td></tr><tr><td>mapreduce.output.fileoutputformat.compress（在mapred-site.xml中配置）</td><td>false</td><td>reducer输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.codec（在mapred-site.xml中配置）</td><td>org.apache.hadoop.io.compress.  DefaultCodec</td><td>reducer输出</td><td>使用标准工具或者编解码器，如gzip和bzip2</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.type（在mapred-site.xml中配置）</td><td>RECORD</td><td>reducer输出</td><td>SequenceFile输出使用的压缩类型：NONE和BLOCK</td></tr></tbody></table><h2 id="6-压缩案例"><a href="#6-压缩案例" class="headerlink" title="6 压缩案例"></a>6 压缩案例</h2><h3 id="压缩解压案例"><a href="#压缩解压案例" class="headerlink" title="压缩解压案例"></a>压缩解压案例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>compress</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span></span><span class="token class-name">CompressionCodec</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span></span><span class="token class-name">CompressionCodecFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span></span><span class="token class-name">CompressionInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span></span><span class="token class-name">CompressionOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ReflectionUtils</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCompress</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token function">compress</span><span class="token punctuation">(</span><span class="token string">"e:/hello.txt"</span><span class="token punctuation">,</span><span class="token string">"org.apache.hadoop.io.compress.BZip2Codec"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//decompress("e:/hello.txt.bz2");</span><span class="token punctuation">}</span><span class="token comment">// 1、压缩</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">String</span> method<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token comment">// （1）获取输入流</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> codecClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CompressionCodec</span> codec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CompressionCodec</span><span class="token punctuation">)</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>codecClass<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// （2）获取输出流</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filename <span class="token operator">+</span> codec<span class="token punctuation">.</span><span class="token function">getDefaultExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CompressionOutputStream</span> cos <span class="token operator">=</span> codec<span class="token punctuation">.</span><span class="token function">createOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// （3）流的对拷</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copyBytes</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span> cos<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// （4）关闭资源</span>cos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 2、解压缩</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decompress</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token comment">// （0）校验是否能解压缩</span><span class="token class-name">CompressionCodecFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompressionCodecFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CompressionCodec</span> codec <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getCodec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>codec <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cannot find codec for file "</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// （1）获取输入流</span><span class="token class-name">CompressionInputStream</span> cis <span class="token operator">=</span> codec<span class="token punctuation">.</span><span class="token function">createInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// （2）获取输出流</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filename <span class="token operator">+</span> <span class="token string">".decoded"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// （3）流的对拷</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copyBytes</span><span class="token punctuation">(</span>cis<span class="token punctuation">,</span> fos<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// （4）关闭资源</span>cis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Map输出端采用压缩"><a href="#Map输出端采用压缩" class="headerlink" title="Map输出端采用压缩"></a>Map输出端采用压缩</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在Driver添加</span><span class="token comment">// 开启map端输出压缩</span>configuration<span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span><span class="token string">"mapreduce.map.output.compress"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置map端输出压缩方式</span>configuration<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token string">"mapreduce.map.output.compress.codec"</span><span class="token punctuation">,</span> <span class="token class-name">BZip2Codec</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">CompressionCodec</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reduce输出采用压缩"><a href="#Reduce输出采用压缩" class="headerlink" title="Reduce输出采用压缩"></a>Reduce输出采用压缩</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置reduce端输出压缩开启</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setCompressOutput</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置压缩的方式</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputCompressorClass</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token class-name">BZip2Codec</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce框架原理</title>
      <link href="2020/02/29/MapReduce%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/"/>
      <url>2020/02/29/MapReduce%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ul><li>总结MapReduce框架原理</li></ul><h2 id="1-InputFotmat数据输入"><a href="#1-InputFotmat数据输入" class="headerlink" title="1 InputFotmat数据输入"></a>1 InputFotmat数据输入</h2><p>待写</p><h2 id="2-MapReduce工作流程"><a href="#2-MapReduce工作流程" class="headerlink" title="2 MapReduce工作流程"></a>2 MapReduce工作流程</h2><p>待写</p><h2 id="3-Shuffle机制"><a href="#3-Shuffle机制" class="headerlink" title="3 Shuffle机制"></a>3 Shuffle机制</h2><h3 id="3-1-Shuffle机制介绍"><a href="#3-1-Shuffle机制介绍" class="headerlink" title="3.1 Shuffle机制介绍"></a>3.1 Shuffle机制介绍</h3><p>Map方法之后，Reduce方法之前的数据称之为Shuffle</p><p>3.2 主要功能</p><p>Partition分区，WritableComparable排序，Combiner合并，GroupingComparator分组（辅助排序）</p><h2 id="4-MapTask工作机制"><a href="#4-MapTask工作机制" class="headerlink" title="4 MapTask工作机制"></a>4 MapTask工作机制</h2><p>​    （1）Read阶段：MapTask通过用户编写的RecordReader，从输入InputSplit中解析出一个个key/value。</p><p>​    （2）Map阶段：该节点主要是将解析出的key/value交给用户编写map()函数处理，并产生一系列新的key/value。</p><p>​    （3）Collect收集阶段：在用户编写map()函数中，当数据处理完成后，一般会调用OutputCollector.collect()输出结果。在该函数内部，它会将生成的key/value分区（调用Partitioner），并写入一个环形内存缓冲区中。</p><p>​    （4）Spill阶段：即“溢写”，当环形缓冲区满后，MapReduce会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。</p><p>​    溢写阶段详情：</p><p>​    步骤1：利用快速排序算法对缓存区内的数据进行排序，排序方式是，先按照分区编号Partition进行排序，然后按照key进行排序。这样，经过排序后，数据以分区为单位聚集在一起，且同一分区内所有数据按照key有序。</p><p>​    步骤2：按照分区编号由小到大依次将每个分区中的数据写入任务工作目录下的临时文件output/spillN.out（N表示当前溢写次数）中。如果用户设置了Combiner，则写入文件之前，对每个分区中的数据进行一次聚集操作。</p><p>​    步骤3：将分区数据的元信息写到内存索引数据结构SpillRecord中，其中每个分区的元信息包括在临时文件中的偏移量、压缩前数据大小和压缩后数据大小。如果当前内存索引大小超过1MB，则将内存索引写到文件output/spillN.out.index中。</p><p>​    （5）Combine阶段：当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。</p><p>​    当所有数据处理完后，MapTask会将所有临时文件合并成一个大文件，并保存到文件output/file.out中，同时生成相应的索引文件output/file.out.index。</p><p>​    在进行文件合并过程中，MapTask以分区为单位进行合并。对于某个分区，它将采用多轮递归合并的方式。每轮合并io.sort.factor（默认10）个文件，并将产生的文件重新加入待合并列表中，对文件排序后，重复以上过程，直到最终得到一个大文件。</p><p>​    让每个MapTask最终只生成一个数据文件，可避免同时打开大量文件和同时读取大量小文件产生的随机读取带来的开销。</p><h2 id="5-RedeceTask工作机制"><a href="#5-RedeceTask工作机制" class="headerlink" title="5 RedeceTask工作机制"></a>5 RedeceTask工作机制</h2><p>​    （1）Copy阶段：ReduceTask从各个MapTask上远程拷贝一片数据，并针对某一片数据，如果其大小超过一定阈值，则写到磁盘上，否则直接放到内存中。</p><p>​    （2）Merge阶段：在远程拷贝数据的同时，ReduceTask启动了两个后台线程对内存和磁盘上的文件进行合并，以防止内存使用过多或磁盘上文件过多。</p><p>​    （3）Sort阶段：按照MapReduce语义，用户编写reduce()函数输入数据是按key进行聚集的一组数据。为了将key相同的数据聚在一起，Hadoop采用了基于排序的策略。由于各个MapTask已经实现对自己的处理结果进行了局部排序，因此，ReduceTask只需对所有数据进行一次归并排序即可。</p><p>​    （4）Reduce阶段：reduce()函数将计算结果写到HDFS上。</p><h2 id="6-OutputFormat数据输出"><a href="#6-OutputFormat数据输出" class="headerlink" title="6 OutputFormat数据输出"></a>6 OutputFormat数据输出</h2><p>​    OutputFormat是MapReduce输出的基类，所有实现MapReduce输出都实现了OutputFormat接口。</p><p>下面我们介绍几种常见的OutputFormat实现类。</p><p>​    1.文本输出TextOutputFormat默认的输出格式是TextOutputFormat，它把每条记录写为文本行。它的键和值可以是任意类型，因为TextOutputFormat调用toString0方法把它们转换为字符串。</p><p>​    2.SequenceFileOutputFormat将SequenceFileOutputFormat输出作为后续MapReduce任务的输入，这便是一种好的输出格式，因为它的格式紧凑，很容易被压缩。</p><p>​    3.自定义OutputFormat根据用户需求，自定义实现输出。</p><h3 id="6-1-自定义OutputFomat步骤"><a href="#6-1-自定义OutputFomat步骤" class="headerlink" title="6.1 自定义OutputFomat步骤"></a>6.1 自定义OutputFomat步骤</h3><p>​    （1）自定义一个类继承FileOutputFormat。</p><pre class="line-numbers language-none"><code class="language-none">package com.atguigu.mapreduce.outputformat;import java.io.IOException;import org.apache.hadoop.io.NullWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.RecordWriter;import org.apache.hadoop.mapreduce.TaskAttemptContext;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;public class FilterOutputFormat extends FileOutputFormat&lt;Text, NullWritable&gt;{@Overridepublic RecordWriter&lt;Text, NullWritable&gt; getRecordWriter(TaskAttemptContext job)throws IOException, InterruptedException {// 创建一个RecordWriterreturn new FilterRecordWriter(job);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    （2）改写RecordWriter，具体改写输出数据的方法write。</p><p>​    <strong>RecordWriter格式：</strong></p><pre class="line-numbers language-none"><code class="language-none">package com.atguigu.mapreduce.outputformat;import java.io.IOException;import org.apache.hadoop.fs.FSDataOutputStream;import org.apache.hadoop.fs.FileSystem;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.NullWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.RecordWriter;import org.apache.hadoop.mapreduce.TaskAttemptContext;public class FilterRecordWriter extends RecordWriter&lt;Text, NullWritable&gt; {FSDataOutputStream atguiguOut = null;FSDataOutputStream otherOut = null;public FilterRecordWriter(TaskAttemptContext job) {// 1 获取文件系统FileSystem fs;try {fs = FileSystem.get(job.getConfiguration());// 2 创建输出文件路径Path atguiguPath = new Path("e:/atguigu.log");Path otherPath = new Path("e:/other.log");// 3 创建输出流atguiguOut = fs.create(atguiguPath);otherOut = fs.create(otherPath);} catch (IOException e) {e.printStackTrace();}}@Overridepublic void write(Text key, NullWritable value) throws IOException, InterruptedException {// 判断是否包含“atguigu”输出到不同文件if (key.toString().contains("atguigu")) {atguiguOut.write(key.toString().getBytes());} else {otherOut.write(key.toString().getBytes());}}@Overridepublic void close(TaskAttemptContext context) throws IOException, InterruptedException {// 关闭资源IOUtils.closeStream(atguiguOut);IOUtils.closeStream(otherOut);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：记得将自定义输出格式设置到job中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 要将自定义的输出格式组件设置到job中</span>job<span class="token punctuation">.</span><span class="token function">setOutputFormatClass</span><span class="token punctuation">(</span><span class="token class-name">FilterOutputFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-Join多种应用"><a href="#7-Join多种应用" class="headerlink" title="7 Join多种应用"></a>7 Join多种应用</h2><h3 id="7-1-工作原理"><a href="#7-1-工作原理" class="headerlink" title="7.1 工作原理"></a>7.1 工作原理</h3><p>​    Map端的主要工作：为来自不同表或文件的key/value对，打标签以区别不同来源的记录。然后用连接字段作为key，其余部分和新加的标志作为value，最后进行输出。</p><p>​    Reduce端的主要工作：在Reduce端以连接字段作为key的分组已经完成，我们只需要在每一个分组当中将那些来源于不同文件的记录（在Map阶段已经打标志分开，最后进行合并就ok了。</p><h3 id="7-2-Reduce-join"><a href="#7-2-Reduce-join" class="headerlink" title="7.2 Reduce join"></a>7.2 Reduce join</h3><p>​    在Mapper阶段使得连接属性为key，其余属性为value（自定义bean对象，记得序列化），再用一个标记属性标记来自于哪个文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>table</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileSplit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">TableBean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token class-name">TableBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Text</span> k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token comment">// 1 获取输入文件切片</span><span class="token class-name">FileSplit</span> split <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FileSplit</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getInputSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 获取输入文件名称</span>name <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token comment">// 1 获取输入数据</span><span class="token class-name">String</span> line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 不同文件分别处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 订单表处理</span><span class="token comment">// 2.1 切割</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.2 封装bean对象</span>bean<span class="token punctuation">.</span><span class="token function">setOrder_id</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setP_id</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setPname</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// 产品表处理</span><span class="token comment">// 2.3 切割</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.4 封装bean对象</span>bean<span class="token punctuation">.</span><span class="token function">setP_id</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setPname</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token string">"pd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setOrder_id</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 3 写出</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    在Reduce阶段，输出连接成功的bean对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>table</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span></span><span class="token class-name">BeanUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">NullWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">TableBean</span><span class="token punctuation">,</span> <span class="token class-name">TableBean</span><span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TableBean</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token comment">// 1准备存储订单的集合</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TableBean</span><span class="token punctuation">&gt;</span></span> orderBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 准备bean对象</span><span class="token class-name">TableBean</span> pdBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TableBean</span> bean <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 订单表</span><span class="token comment">// 拷贝传递过来的每条订单数据到集合中</span><span class="token class-name">TableBean</span> orderBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>orderBean<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>orderBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// 产品表</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">// 拷贝传递过来的产品表到内存中</span><span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>pdBean<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 3 表的拼接</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">TableBean</span> bean<span class="token operator">:</span>orderBeans<span class="token punctuation">)</span><span class="token punctuation">{</span>bean<span class="token punctuation">.</span>setPname <span class="token punctuation">(</span>pdBean<span class="token punctuation">.</span><span class="token function">getPname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 数据写出去</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：这种方式中，合并的操作是在Reduce阶段完成，Reduce端的处理压力太大，Map节点的运算负载则很低，资源利用率不高，且在Reduce阶段极易产生数据倾斜。</p><h3 id="map-join"><a href="#map-join" class="headerlink" title="map join"></a>map join</h3><p>使用场景：Map Join适用于一张表十分小、一张表很大的场景。</p><p>具体办法：采用DistributedCache</p><p>​    （1）在Mapper的setup阶段，将文件读取到缓存集合中。</p><p>​    （2）在驱动函数中加载缓存。</p><p>​    // 缓存普通文件到Task运行节点。</p><p>​    job.addCacheFile(new URI(“file://e:/cache/pd.txt”));</p><p>注：简单说就是把一个小表用map表示，用大表的连接属性直接映射出小表的属性</p><p><strong>对于驱动模块Driver来说</strong></p><pre class="line-numbers language-none"><code class="language-none">// 6 加载缓存数据job.addCacheFile(new URI("file:///e:/input/inputcache/pd.txt"));// 7 Map端Join的逻辑不需要Reduce阶段，设置reduceTask数量为0job.setNumReduceTasks(0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于mapper来说，先在map前读取缓存数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">NullWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributedCacheMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pdMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span>Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token comment">// 1 获取缓存的文件</span>URI<span class="token punctuation">[</span><span class="token punctuation">]</span> cacheFiles <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getCacheFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> path <span class="token operator">=</span> cacheFiles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> line<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 2 切割</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 缓存数据到集合</span>pdMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 4 关流</span>reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Text</span> k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token comment">// 1 获取一行</span><span class="token class-name">String</span> line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 截取</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 获取产品id</span><span class="token class-name">String</span> pId <span class="token operator">=</span> fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 4 获取商品名称</span><span class="token class-name">String</span> pdName <span class="token operator">=</span> pdMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 拼接</span>k<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token operator">+</span> pdName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 写出</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-计数器应用与数据清洗（ETL）"><a href="#8-计数器应用与数据清洗（ETL）" class="headerlink" title="8 计数器应用与数据清洗（ETL）"></a>8 计数器应用与数据清洗（ETL）</h2><p>​    Hadoop为每个作业维护若干内置计数器，以描述多项指标。例如，某些计数器记录已处理的字节数和记录数，使用户可监控已处理的输入数据量和已产生的输出数据量。</p><p>使用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-MapRedece开发总结"><a href="#9-MapRedece开发总结" class="headerlink" title="9 MapRedece开发总结"></a>9 MapRedece开发总结</h2><h4 id="1-输入数据接口：InputFormat"><a href="#1-输入数据接口：InputFormat" class="headerlink" title="1. 输入数据接口：InputFormat"></a>1. 输入数据接口：InputFormat</h4><p>（1）默认使用的实现类是：TextInputFormat</p><p>（2）TextInputFormat的功能逻辑是：一次读一行文本，然后将该行的起始偏移量作为key，行内容作为value返回。</p><p>（3）KeyValueTextlnputFomat每一行均为一条记录，被分隔符分割为key，value。默认分隔符是tab（\t）。<br>（4）NlinelnputFormat按照指定的行数N来划分切片。</p><p>（5）CombineTextlnputFormat可以把多个小文件合并成一个切片处理，提高处理效率。</p><p>（6）用户还可以自定义ImputFormat。</p><h4 id="2-逻辑处理接口：Mapper"><a href="#2-逻辑处理接口：Mapper" class="headerlink" title="2.逻辑处理接口：Mapper"></a>2.逻辑处理接口：Mapper</h4><p>用户根据业务需求实现其中三个方法：map）setup）cleanup）</p><h4 id="3-Partitioner分区"><a href="#3-Partitioner分区" class="headerlink" title="3.Partitioner分区"></a>3.Partitioner分区</h4><p>（1）有默认实现HashPartitioner，逻辑是根据key的哈希值和numReduces来返回一个分区号；key hashCode（）&amp;Integer.MAXVALUE%<br>numReduces</p><p>（2）如果业务上有特别的需求，可以自定义分区。</p><h4 id="4-Comparable排序"><a href="#4-Comparable排序" class="headerlink" title="4.Comparable排序"></a>4.Comparable排序</h4><p>（1）当我们用自定义的对象作为key来输出时，就必须要实现WritableComparable接口，重写其中的compareTo0方法。</p><p>（2）部分排序：对最终输出的每一个文件进行内部排序。</p><p>（3）全排序：对所有数据进行排序，通常只有一个Reduce。</p><p>（4）二次排序：排序的条件有两个。</p><h4 id="5-Combiner合并"><a href="#5-Combiner合并" class="headerlink" title="5.Combiner合并"></a>5.Combiner合并</h4><p>Combiner合并可以提高程序执行效率，减少I0传输。但是使用时必须不能影响原有的业务处理结果。</p><h4 id="6-Reduce端分组：GroupingComparator"><a href="#6-Reduce端分组：GroupingComparator" class="headerlink" title="6.Reduce端分组：GroupingComparator"></a>6.Reduce端分组：GroupingComparator</h4><p>在Reduce端对key进行分组。应用于：在接收的key为bean对象时，想让一个或几个字段相同（全部字段比较不相同）的key进入到同一个reduce方法时，可以采用分组排序。</p><h4 id="7-逻辑处理接口："><a href="#7-逻辑处理接口：" class="headerlink" title="7.逻辑处理接口："></a>7.逻辑处理接口：</h4><p>Reducer用户根据业务需求实现其中三个方法：reduce();setup();cleanup()</p><h4 id="8-输出数据接口：OutputFormat"><a href="#8-输出数据接口：OutputFormat" class="headerlink" title="8.输出数据接口：OutputFormat"></a>8.输出数据接口：OutputFormat</h4><p>（1）默认实现类是TextOutputFormat，功能逻辑是：将每一个KV对，向目标文本文件输出一行。</p><p>（2）将SequenceFileOutputFormat输出作为后续MapReduce任务的输入，这便是一种好的输出格式，因为它的格式紧凑，很容易被压缩。</p><p>（3）用户还可以自定义OutputFormat。</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bean对象没有序列化</title>
      <link href="2020/02/29/bean%E5%AF%B9%E8%B1%A1%E6%B2%A1%E6%9C%89%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>2020/02/29/bean%E5%AF%B9%E8%B1%A1%E6%B2%A1%E6%9C%89%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>在使用bean对象进行数据传输的过程中，一定要注意序列化，不然将出现map输出收集器的错误</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">2020</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">29</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">063</span> WARN <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>MapTask</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token class-name">Unable</span> <span class="token keyword">to</span> <span class="token namespace">initialize</span> <span class="token class-name">MapOutputCollector</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>MapTask</span>$<span class="token class-name">MapOutputBuffer</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NullPointerException</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>MapTask</span>$<span class="token class-name">MapOutputBuffer</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">MapTask</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1011</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>MapTask</span><span class="token punctuation">.</span><span class="token function">createSortingCollector</span><span class="token punctuation">(</span><span class="token class-name">MapTask</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">402</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>MapTask</span><span class="token punctuation">.</span>access$<span class="token function">100</span><span class="token punctuation">(</span><span class="token class-name">MapTask</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">81</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>MapTask</span>$<span class="token class-name">NewOutputCollector</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">MapTask</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">698</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>MapTask</span><span class="token punctuation">.</span><span class="token function">runNewMapper</span><span class="token punctuation">(</span><span class="token class-name">MapTask</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">770</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>MapTask</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MapTask</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">341</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>LocalJobRunner</span>$<span class="token class-name">Job</span>$<span class="token class-name">MapTaskRunnable</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">LocalJobRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">243</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>Executors</span>$<span class="token class-name">RunnableAdapter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Executors</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">511</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>FutureTask</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">FutureTask</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">266</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1142</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span>$<span class="token class-name">Worker</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">617</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出错位置：Reduce Join案例</p>]]></content>
      
      
      <categories>
          
          <category> 常见错误 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线预览文件pdfJS</title>
      <link href="2020/02/28/%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88%E6%96%87%E4%BB%B6pdfJS/"/>
      <url>2020/02/28/%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88%E6%96%87%E4%BB%B6pdfJS/</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载pdf-js插件"><a href="#1-下载pdf-js插件" class="headerlink" title="1 下载pdf.js插件"></a>1 下载pdf.js插件</h3><p>地址: <a href="http://mozilla.github.io/pdf.js/">http://mozilla.github.io/pdf.js/</a></p><p>下载的时候选择Stable（稳定版），下载完成以后进行解压，</p><h3 id="2-部署"><a href="#2-部署" class="headerlink" title="2 部署"></a>2 部署</h3><p>在tomcat的webapps文件夹下新建一个目录比如books，进解压的文件传入。</p><p>运行tomcat即可以进行访问</p><p><a href="http://localhost:8080/books/web/viewer.html">http://localhost:8080/books/web/viewer.html</a></p><h3 id="3-添加文档"><a href="#3-添加文档" class="headerlink" title="3 添加文档"></a>3 添加文档</h3><p>访问自己需要访问的pdf文档，就可以先在books下新建一个目录，比如hadoop，将自己的1.pdf文档放入hadoop目录下，就可以通过<a href="http://localhost:8080/books/hadoop/1.pdf">http://localhost:8080/books/hadoop/1.pdf</a>访问。</p><h3 id="4-云服务器"><a href="#4-云服务器" class="headerlink" title="4 云服务器"></a>4 云服务器</h3><p>将localhost换成服务器的ip或者域名即可</p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GroupingComparator错误</title>
      <link href="2020/02/28/GroupingComparator%E9%94%99%E8%AF%AF/"/>
      <url>2020/02/28/GroupingComparator%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>在进行重写的时候千万要小心，一不小心就会导致出错，注意参数！</p><p>错误处：</p><pre class="line-numbers language-none"><code class="language-none">@Overridepublic int compare(Object a, Object b) {// TODO Auto-generated method stubreturn super.compare(a, b);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改正：</p><pre class="line-numbers language-none"><code class="language-none">@Overridepublic int compare(WritableComparable a, WritableComparable b) {// 要求只要id相同，就认为是相同的keyOrderBean aBean = (OrderBean) a;OrderBean bBean = (OrderBean) b;int result;if (aBean.getOrder_id() &gt; bBean.getOrder_id()) {result = 1;}else if(aBean.getOrder_id() &lt; bBean.getOrder_id()){result = -1;}else {result = 0;}return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出错案例：统计order的top1</p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map值类型不匹配</title>
      <link href="2020/02/27/map%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%8C%B9%E9%85%8D/"/>
      <url>2020/02/27/map%E5%80%BC%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>map值类型不匹配</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token operator">:</span> <span class="token class-name">Type</span> mismatch in value from map<span class="token operator">:</span> expected <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mr<span class="token punctuation">.</span>sort<span class="token punctuation">.</span></span>FlowBean</span><span class="token punctuation">,</span> received <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Text</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>LocalJobRunner</span>$<span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">runTasks</span><span class="token punctuation">(</span><span class="token class-name">LocalJobRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">462</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span></span>LocalJobRunner</span>$<span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">LocalJobRunner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">522</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>错误位置：进行排序案例的时候发生的错误</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//应该为Text.class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注：写Driver驱动的时候，要特别注意类型错误问题</p><p>因为不太懂这方面的错，所以</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 常见错误 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WritableComparable排序</title>
      <link href="2020/02/27/WritableComparable%E6%8E%92%E5%BA%8F/"/>
      <url>2020/02/27/WritableComparable%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="排序的分类"><a href="#排序的分类" class="headerlink" title="排序的分类"></a>排序的分类</h3><ol><li><p>部分排序</p><ul><li>MapReduce根据输入记录的键对数据集排序，保证输出的每个文件内部有序</li></ul></li><li><p>全排序</p><ul><li>最终输出结果为一个文件，且文件内部有序</li></ul></li><li><p>辅助排序：（GroupingComparator分组)</p><ul><li>在Reduece端对key进行分组。应用于key为bean对象时，想让一个或几个字段相同的key 进入到同一个reduce方法时，可以采用分组排序</li></ul></li><li><p>二次排序</p><ul><li>在自定义排序过程中，如果compareTo中的判断添加为两个即为二次排序</li></ul></li></ol><h3 id="自定义排序WritableComparable"><a href="#自定义排序WritableComparable" class="headerlink" title="自定义排序WritableComparable"></a>自定义排序WritableComparable</h3><p>1.原理分析</p><p>   ​    bean对象作为key传输，需要实现WritableComparable接口重写compareTo方法，就可以实现排序</p>   <pre class="line-numbers language-none"><code class="language-none">@Overridepublic int compareTo(FlowBean o) {int result;// 按照总流量大小，倒序排列if (sumFlow &gt; bean.getSumFlow()) {result = -1;}else if (sumFlow &lt; bean.getSumFlow()) {result = 1;}else {result = 0;} return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WritableComparable排序案例实操（全排序）"><a href="#WritableComparable排序案例实操（全排序）" class="headerlink" title="WritableComparable排序案例实操（全排序）"></a>WritableComparable排序案例实操（全排序）</h3><ol><li><p>需求：对总流量进行排序</p></li><li><p>代码实现</p><p>使用以前的Flowcount就可以实现，代码就可以实现，略</p></li></ol><h3 id="排序案例（区内排序）"><a href="#排序案例（区内排序）" class="headerlink" title="排序案例（区内排序）"></a>排序案例（区内排序）</h3><p>需求：要求每个省份手机号输出的文件中按照总流量内部排序</p><p>注意点：区间排序中，需要添加的是自定义的Patitioner分区类与在驱动类中添加分区类，设置Reducetask个数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Partitioner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProvincePartitioner</span> <span class="token keyword">extends</span> <span class="token class-name">Partitioner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowBean</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPartition</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> numPartitions<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 1 获取手机号码前三位</span><span class="token class-name">String</span> preNum <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> partition <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 2 根据手机号归属地设置分区</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"136"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>partition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"137"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>partition <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"138"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>partition <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"139"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>partition <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> partition<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 加载自定义分区类</span>job<span class="token punctuation">.</span><span class="token function">setPartitionerClass</span><span class="token punctuation">(</span><span class="token class-name">ProvincePartitioner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置Reducetask个数</span>job<span class="token punctuation">.</span><span class="token function">setNumReduceTasks</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GroupingComparator分组（辅助排序）"><a href="#GroupingComparator分组（辅助排序）" class="headerlink" title="GroupingComparator分组（辅助排序）"></a>GroupingComparator分组（辅助排序）</h3><p>对Reduce阶段的数据根据某一个或几个字段进行分组</p><ol><li><p>自定义继承WritableComparator</p></li><li><p>重写compare()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">WritableComparable</span> a<span class="token punctuation">,</span> <span class="token class-name">WritableComparable</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较的业务逻辑</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个构造将比较对象的类传给父类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">OrderGroupingComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="GroupingComparator分组案例实操"><a href="#GroupingComparator分组案例实操" class="headerlink" title="GroupingComparator分组案例实操"></a>GroupingComparator分组案例实操</h3><ol><li><p>需求：有如下订单数据；</p><ol><li>表4-2 订单数据</li></ol><table><thead><tr><th>订单id</th><th>商品id</th><th>成交金额</th></tr></thead><tbody><tr><td>0000001</td><td>Pdt_01</td><td>222.8</td></tr><tr><td></td><td>Pdt_02</td><td>33.8</td></tr><tr><td>0000002</td><td>Pdt_03</td><td>522.8</td></tr><tr><td></td><td>Pdt_04</td><td>122.4</td></tr><tr><td></td><td>Pdt_05</td><td>722.4</td></tr><tr><td>0000003</td><td>Pdt_06</td><td>232.8</td></tr><tr><td></td><td>Pdt_02</td><td>33.8</td></tr></tbody></table><ol start="2"><li><p>现在需要求出每一个订单中最贵的商品。</p><blockquote><p><em>期望输出数据</em>*</p><p>1    222.8</p><p>2    722.4</p><p>3    232.8</p></blockquote></li></ol></li><li><p>需求分析</p><ol><li>利用“订单id和成交金额”作为key，可以将Map阶段读取到的所有订单数据按照id升序排序，如果id相同按照金额降序排序，发送到Reduce</li><li>在Reduce端利用groupComparator将订单id相同的kv合成为组，然后取第一个即是该订单中最贵商品</li></ol></li><li><p>代码实现</p><ol><li><p>定义订单信息OrderBean类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataInput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">WritableComparable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderBean</span> <span class="token keyword">implements</span> <span class="token class-name">WritableComparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderBean</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> order_id<span class="token punctuation">;</span> <span class="token comment">// 订单id号</span><span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span> <span class="token comment">// 价格</span><span class="token keyword">public</span> <span class="token class-name">OrderBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">OrderBean</span><span class="token punctuation">(</span><span class="token keyword">int</span> order_id<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>order_id <span class="token operator">=</span> order_id<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">DataOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFields</span><span class="token punctuation">(</span><span class="token class-name">DataInput</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>order_id <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>price <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> order_id <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> order_id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrder_id</span><span class="token punctuation">(</span><span class="token keyword">int</span> order_id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>order_id <span class="token operator">=</span> order_id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 二次排序</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> result<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>order_id <span class="token operator">&gt;</span> o<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>order_id <span class="token operator">&lt;</span> o<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// 价格倒序排序</span>result <span class="token operator">=</span> price <span class="token operator">&gt;</span> o<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写OrderSortMapper类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">NullWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">OrderBean</span><span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token class-name">OrderBean</span> k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token comment">// 1 获取一行</span><span class="token class-name">String</span> line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 截取</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 封装对象</span>k<span class="token punctuation">.</span><span class="token function">setOrder_id</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 写出</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写OrderSortGroupingComparator类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">WritableComparable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">WritableComparator</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderGroupingComparator</span> <span class="token keyword">extends</span> <span class="token class-name">WritableComparator</span> <span class="token punctuation">{</span><span class="token keyword">protected</span> <span class="token class-name">OrderGroupingComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">WritableComparable</span> a<span class="token punctuation">,</span> <span class="token class-name">WritableComparable</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">OrderBean</span> aBean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span><span class="token class-name">OrderBean</span> bBean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">)</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> result<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>aBean<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> bBean<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aBean<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> bBean<span class="token punctuation">.</span><span class="token function">getOrder_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写OrderSortReducer类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">NullWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderBean</span><span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">,</span> <span class="token class-name">OrderBean</span><span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NullWritable</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">NullWritable</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写OrderSortDriver类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">NullWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileInputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDriver</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token comment">// 输入输出路径需要根据自己电脑上实际的输入输出路径设置</span>args  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"e:/input/inputorder"</span> <span class="token punctuation">,</span> <span class="token string">"e:/output1"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 1 获取配置信息</span><span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Job</span> job <span class="token operator">=</span> <span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 设置jar包加载路径</span>job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span><span class="token class-name">OrderDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 加载map/reduce类</span>job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span><span class="token class-name">OrderMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span><span class="token class-name">OrderReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 设置map输出数据key和value类型</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">NullWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 设置最终输出数据的key和value类型</span>job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">OrderBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">NullWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 设置输入数据和输出数据路径</span><span class="token class-name">FileInputFormat</span><span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 8 设置reduce端的分组</span>job<span class="token punctuation">.</span><span class="token function">setGroupingComparatorClass</span><span class="token punctuation">(</span><span class="token class-name">OrderGroupingComparator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7 提交</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Partition分区</title>
      <link href="2020/02/26/Partition%E5%88%86%E5%8C%BA/"/>
      <url>2020/02/26/Partition%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>问题引出</strong>：将结果按照条件输出到不同文件（分区）中</p><p>默认的分区是根据key的hashCode对ReduceTasks个数取模得到的。</p><h3 id="自定义Partitioner步骤"><a href="#自定义Partitioner步骤" class="headerlink" title="自定义Partitioner步骤"></a>自定义Partitioner步骤</h3><ol><li><p>自定义继承Partitioner,重写getPartition()方法</p></li><li><p>在job驱动中，设置自定义Partitioner</p><pre class="line-numbers language-none"><code class="language-none">job.setPatitionerClass(CustonPartitioner.class)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自定义Partition后，要根据自定义Partition的逻辑设置相对应的ReduceTask</p><pre class="line-numbers language-none"><code class="language-none">job.setNumReduceTasd();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>分区总结</p><blockquote><p>（1）如果Reduce Task的数量&gt;getPartition的结果数，则会多产生几个空的输出文件part-r-000xx；</p><p>（2）如果1&lt;ReduceTask的数量&lt;getPartition的结果数，则有一部分分区数据无处安放，会Exception；<br>（3）如果ReduceTask的数量=1，则不管MapTask端输出多少个分区文件，最终结果都交给这一个Reduce Task，最终也就只会产生一个结果文件part-r-00000；<br>（4）分区号必须从零开始，逐一累加。</p></blockquote></li></ol><h3 id="Partition案例实操"><a href="#Partition案例实操" class="headerlink" title="Partition案例实操"></a>Partition案例实操</h3><p>题目：将统计结果按照手机归属地不同省份输出到不同文件中（分区）</p><ul><li><p>添加分区类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>flowsum</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Partitioner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProvincePartitioner</span> <span class="token keyword">extends</span> <span class="token class-name">Partitioner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">FlowBean</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPartition</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span> <span class="token class-name">FlowBean</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> numPartitions<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 1 获取电话号码的前三位</span><span class="token class-name">String</span> preNum <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> partition <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 2 判断是哪个省</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"136"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>partition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"137"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>partition <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"138"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>partition <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"139"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>preNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>partition <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> partition<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在驱动函数中增加自定义数据分区设置和ReduceTask设置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 8 指定自定义数据分区</span>job<span class="token punctuation">.</span><span class="token function">setPartitionerClass</span><span class="token punctuation">(</span><span class="token class-name">ProvincePartitioner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 9 同时指定相应数量的reduce task</span>job<span class="token punctuation">.</span><span class="token function">setNumReduceTasks</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Text导包错误</title>
      <link href="2020/02/26/Text%E5%AF%BC%E5%8C%85%E9%94%99%E8%AF%AF/"/>
      <url>2020/02/26/Text%E5%AF%BC%E5%8C%85%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">java.lang.ClassCastException: class com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$Textat java.lang.Class.asSubclass(Class.java:3404)at org.apache.hadoop.mapred.JobConf.getOutputKeyComparator(JobConf.java:887)at org.apache.hadoop.mapred.MapTask$MapOutputBuffer.init(MapTask.java:1004)at org.apache.hadoop.mapred.MapTask.createSortingCollector(MapTask.java:402)at org.apache.hadoop.mapred.MapTask.access$100(MapTask.java:81)at org.apache.hadoop.mapred.MapTask$NewOutputCollector.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init</span><span class="token punctuation">&gt;</span></span>(MapTask.java:698)at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:770)at org.apache.hadoop.mapred.MapTask.run(MapTask.java:341)at org.apache.hadoop.mapred.LocalJobRunner$Job$MapTaskRunnable.run(LocalJobRunner.java:243)at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)at java.util.concurrent.FutureTask.run(FutureTask.java:266)at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)at java.lang.Thread.run(Thread.java:748)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误的导入了Text包，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">错误：<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jersey<span class="token punctuation">.</span>core<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">XMLJAXBElementProvider<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>正确的包：    <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 常见错误 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode计划表</title>
      <link href="2020/02/21/LeetCode%E8%AE%A1%E5%88%92%E8%A1%A8/"/>
      <url>2020/02/21/LeetCode%E8%AE%A1%E5%88%92%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>题目序号</th><th>题目名称</th><th>总结</th></tr></thead><tbody><tr><td>1</td><td>Two Sum</td><td></td></tr><tr><td>4</td><td>Median of Two Sorted Arrays</td><td></td></tr><tr><td>11</td><td>Container  With Most Water</td><td></td></tr><tr><td>17</td><td>Letter Combinations of a Phone Number</td><td></td></tr><tr><td>21</td><td>Merge Two  Sorted Lists</td><td></td></tr><tr><td>23</td><td>Merge k Sorted Lists</td><td></td></tr><tr><td>37</td><td>Sudoku  Solver</td><td></td></tr><tr><td>39</td><td>Combination Sum</td><td></td></tr><tr><td>40</td><td>Combination  Sum II</td><td></td></tr><tr><td>51</td><td>N-Queens</td><td></td></tr><tr><td>53</td><td>Maximum  Subarray</td><td></td></tr><tr><td>56</td><td>Merge Intervals</td><td></td></tr><tr><td>57</td><td>Insert  Interval</td><td></td></tr><tr><td>62</td><td>Unique Paths</td><td></td></tr><tr><td>63</td><td>Unique Paths  II</td><td></td></tr><tr><td>64</td><td>Minimum Path Sum</td><td></td></tr><tr><td>69</td><td>sqrt(x)</td><td></td></tr><tr><td>70</td><td>Climbing Stairs</td><td></td></tr><tr><td>72</td><td>Edit  Distance</td><td></td></tr><tr><td>78</td><td>Subsets</td><td></td></tr><tr><td>79</td><td>Word Search</td><td></td></tr><tr><td>91</td><td>Decode Ways</td><td></td></tr><tr><td>98</td><td>Validate  Binary Search Tree</td><td></td></tr><tr><td>100</td><td>Same Tree</td><td></td></tr><tr><td>102</td><td>Binary Tree  Level Order Traversal</td><td></td></tr><tr><td>110</td><td>Balanced Binary Tree</td><td></td></tr><tr><td>112</td><td>Path Sum</td><td></td></tr><tr><td>113</td><td>Path Sum II</td><td></td></tr><tr><td>115</td><td>Distinct  Subsequences</td><td></td></tr><tr><td>120</td><td>Triangle</td><td></td></tr><tr><td>121</td><td>Best Time to  Buy and Sell Stock</td><td></td></tr><tr><td>124</td><td>Binary Tree Maximum Path Sum</td><td></td></tr><tr><td>126</td><td>Word Ladder  II</td><td></td></tr><tr><td>127</td><td>Word Ladder</td><td></td></tr><tr><td>128</td><td>Longest  Consecutive Sequence</td><td></td></tr><tr><td>139</td><td>Word Break (revisit)</td><td></td></tr><tr><td>140</td><td>Word Break  II</td><td></td></tr><tr><td>141</td><td>Linked List Cycle</td><td></td></tr><tr><td>145</td><td>Binary Tree  Postorder Traversal</td><td></td></tr><tr><td>146</td><td>LRU Cache</td><td></td></tr><tr><td>148</td><td>Sort List</td><td></td></tr><tr><td>149</td><td>Max Points on a Line</td><td></td></tr><tr><td>153</td><td>Find Minimum  in Rotated Sorted Array</td><td></td></tr><tr><td>154</td><td>Find Minimum in Rotated Sorted Array II</td><td></td></tr><tr><td>169</td><td>Majority  Element</td><td></td></tr><tr><td>174</td><td>Dungeon Game</td><td></td></tr><tr><td>198</td><td>House Robber</td><td></td></tr><tr><td>200</td><td>Number of Islands</td><td></td></tr><tr><td>204</td><td>Count Primes</td><td></td></tr><tr><td>207</td><td>Course Schedule</td><td></td></tr><tr><td>208</td><td>Implement  Trie (Prefix Tree)</td><td></td></tr><tr><td>210</td><td>Course Schedule II</td><td></td></tr><tr><td>216</td><td>Combination  Sum III</td><td></td></tr><tr><td>218</td><td>The Skyline Problem</td><td></td></tr><tr><td>221</td><td>Maximal  Square</td><td></td></tr><tr><td>239</td><td>Sliding Window Maximum</td><td></td></tr><tr><td>241</td><td>Different  Ways to Add Parentheses</td><td></td></tr><tr><td>263</td><td>Ugly Number</td><td></td></tr><tr><td>264</td><td>Ugly Number  II</td><td></td></tr><tr><td>268</td><td>Missing Number</td><td></td></tr><tr><td>282</td><td>Expression  Add Operators</td><td></td></tr><tr><td>289</td><td>Game of Life</td><td></td></tr><tr><td>295</td><td>Find Median  from Data Stream</td><td></td></tr><tr><td>297</td><td>Serialize and Deserialize Binary Tree</td><td></td></tr><tr><td>300</td><td>Longest  Increasing Subsequence</td><td></td></tr><tr><td>301</td><td>Remove Invalid Parentheses</td><td></td></tr><tr><td>303</td><td>Range Sum  Query - Immutable</td><td></td></tr><tr><td>304</td><td>Range Sum Query 2D - Immutable</td><td></td></tr><tr><td>309</td><td>Best Time to Buy and Sell Stock with  Cooldown</td><td></td></tr><tr><td>312</td><td>Burst Balloons</td><td></td></tr><tr><td>315</td><td>Count of  Smaller Numbers After Self</td><td></td></tr><tr><td>321</td><td>Create Maximum Number</td><td></td></tr><tr><td>322</td><td>Coin Change</td><td></td></tr><tr><td>329</td><td>Longest Increasing Path in a Matrix</td><td></td></tr><tr><td>332</td><td>Reconstruct  Itinerary</td><td></td></tr><tr><td>347</td><td>Top K Frequent Elements</td><td></td></tr><tr><td>377</td><td>Combination  Sum IV</td><td></td></tr><tr><td>380</td><td>Insert Delete GetRandom O(1)</td><td></td></tr><tr><td>381</td><td>Insert Delete GetRandom O(1) - Duplicates  allowed</td><td></td></tr><tr><td>391</td><td>Perfect Rectangle</td><td></td></tr><tr><td>399</td><td>Evaluate  Division</td><td></td></tr><tr><td>404</td><td>Sum of Left Leaves</td><td></td></tr><tr><td>409</td><td>Longest  Palindrome</td><td></td></tr><tr><td>410</td><td>Split Array Largest Sum</td><td></td></tr><tr><td>416</td><td>Partition  Equal Subset Sum</td><td></td></tr><tr><td>417</td><td>Pacific Atlantic Water Flow</td><td></td></tr><tr><td>432</td><td>All O`one  Data Structure</td><td></td></tr><tr><td>438</td><td>Find All Anagrams in a String</td><td></td></tr><tr><td>449</td><td>Serialize  and Deserialize BST</td><td></td></tr><tr><td>450</td><td>Delete Node in a BST</td><td></td></tr><tr><td>451</td><td>Sort  Characters By Frequency</td><td></td></tr><tr><td>452</td><td>Minimum Number of Arrows to Burst Balloons</td><td></td></tr><tr><td>455</td><td>Assign  Cookies</td><td></td></tr><tr><td>460</td><td>LFU Cache</td><td></td></tr><tr><td>461</td><td>Hamming  Distance</td><td></td></tr><tr><td>463</td><td>Island Perimeter</td><td></td></tr><tr><td>464</td><td>Can I Win</td><td></td></tr><tr><td>470</td><td>Implement Rand10() Using Rand7()</td><td></td></tr><tr><td>476</td><td>Number  Complement</td><td></td></tr><tr><td>477</td><td>Total Hamming Distance</td><td></td></tr><tr><td>480</td><td>Sliding  Window Median</td><td></td></tr><tr><td>486</td><td>Predict the Winner</td><td></td></tr><tr><td>488</td><td>Zuma Game</td><td></td></tr><tr><td>494</td><td>Target Sum2</td><td></td></tr><tr><td>494</td><td>Target Sum</td><td></td></tr><tr><td>504</td><td>Base 7</td><td></td></tr><tr><td>516</td><td>Longest  Palindromic Subsequence</td><td></td></tr><tr><td>525</td><td>Contiguous Array</td><td></td></tr><tr><td>530</td><td>Minimum  Absolute Difference in BST</td><td></td></tr><tr><td>540</td><td>Single Element in a Sorted Array</td><td></td></tr><tr><td>543</td><td>Diameter of  Binary Tree</td><td></td></tr><tr><td>546</td><td>Remove Boxes</td><td></td></tr><tr><td>547</td><td>Friend  Circles</td><td></td></tr><tr><td>551</td><td>Student Attendance Record I</td><td></td></tr><tr><td>560</td><td>Subarray Sum  Equals K</td><td></td></tr><tr><td>561</td><td>Array Partition I</td><td></td></tr><tr><td>566</td><td>Reshape the  Matrix</td><td></td></tr><tr><td>567</td><td>Permutation in String</td><td></td></tr><tr><td>576</td><td>Out of  Boundary Paths</td><td></td></tr><tr><td>606</td><td>Construct String from Binary Tree</td><td></td></tr><tr><td>611</td><td>Valid  Triangle Number</td><td></td></tr><tr><td>617</td><td>Merge Two Binary Trees</td><td></td></tr><tr><td>621</td><td>Task  Scheduler</td><td></td></tr><tr><td>628</td><td>Maximum Product of Three Numbers</td><td></td></tr><tr><td>633</td><td>Sum of  Square Numbers</td><td></td></tr><tr><td>636</td><td>Exclusive Time of Functions</td><td></td></tr><tr><td>637</td><td>Average of  Levels in Binary Tree</td><td></td></tr><tr><td>639</td><td>Decode Ways II</td><td></td></tr><tr><td>652</td><td>Find  Duplicate Subtrees</td><td></td></tr><tr><td>654</td><td>Maximum Binary Tree</td><td></td></tr><tr><td>655</td><td>Print Binary  Tree</td><td></td></tr><tr><td>657</td><td>Judge Route Circle</td><td></td></tr><tr><td>664</td><td>Strange  Printer</td><td></td></tr><tr><td>668</td><td>Kth Smallest Number in Multiplication Table</td><td></td></tr><tr><td>669</td><td>Trim a  Binary Search Tree</td><td></td></tr><tr><td>671</td><td>Second Minimum Node In a Binary Tree</td><td></td></tr><tr><td>673</td><td>Number of Longest Increasing Subsequence</td><td></td></tr><tr><td>674</td><td>Longest Continuous Increasing Subsequence</td><td></td></tr><tr><td>675</td><td>Cut Off  Trees for Golf Event</td><td></td></tr><tr><td>676</td><td>Implement Magic Dictionary</td><td></td></tr><tr><td>677</td><td>Map Sum  Pairs</td><td></td></tr><tr><td>678</td><td>Valid Parenthesis String</td><td></td></tr><tr><td>680</td><td>Valid  Palindrome II</td><td></td></tr><tr><td>681</td><td>Next Closest Time</td><td></td></tr><tr><td>682</td><td>Baseball  Game</td><td></td></tr><tr><td>683</td><td>K Empty Slots</td><td></td></tr><tr><td>684</td><td>Redundant  Connection</td><td></td></tr><tr><td>685</td><td>Redundant Connection II</td><td></td></tr><tr><td>687</td><td>Longest  Univalue Path</td><td></td></tr><tr><td>688</td><td>Knight Probability in Chessboard</td><td></td></tr><tr><td>690</td><td>Employee  Importance</td><td></td></tr><tr><td>692</td><td>Top K Frequent Words</td><td></td></tr><tr><td>699</td><td>Falling  Squares</td><td></td></tr><tr><td>707</td><td>Design Linked List</td><td></td></tr><tr><td>712</td><td>Minimum ASCII Delete Sum for Two Strings</td><td></td></tr><tr><td>715</td><td>Range Module</td><td></td></tr><tr><td>719</td><td>Find K-th  Smallest Pair Distance</td><td></td></tr><tr><td>720</td><td>Longest Word in Dictionary</td><td></td></tr><tr><td>724</td><td>Find Pivot  Index</td><td></td></tr><tr><td>725</td><td>Split Linked List in Parts</td><td></td></tr><tr><td>726</td><td>Number of  Atoms</td><td></td></tr><tr><td>728</td><td>Self Dividing Numbers</td><td></td></tr><tr><td>729</td><td>My Calendar  I</td><td></td></tr><tr><td>730</td><td>Count Different Palindromic Subsequences</td><td></td></tr><tr><td>731</td><td>My Calendar  II</td><td></td></tr><tr><td>732</td><td>My Calendar III</td><td></td></tr><tr><td>733</td><td>Flood Fill</td><td></td></tr><tr><td>734</td><td>Sentence Similarity</td><td></td></tr><tr><td>735</td><td>Asteroid  Collision</td><td></td></tr><tr><td>736</td><td>Parse Lisp Expression</td><td></td></tr><tr><td>737</td><td>Sentence  Similarity II</td><td></td></tr><tr><td>740</td><td>Delete and Earn</td><td></td></tr><tr><td>741</td><td>Cherry  Pickup</td><td></td></tr><tr><td>742</td><td>Closest Leaf in a Binary Tree</td><td></td></tr><tr><td>743</td><td>Network  Delay Time</td><td></td></tr><tr><td>744</td><td>Find Smallest Letter Greater Than Target</td><td></td></tr><tr><td>745</td><td>Prefix and  Suffix Search</td><td></td></tr><tr><td>746</td><td>Min Cost Climbing Stairs</td><td></td></tr><tr><td>748</td><td>Shortest  Completing Word</td><td></td></tr><tr><td>749</td><td>Contain Virus</td><td></td></tr><tr><td>752</td><td>Open the  Lock</td><td></td></tr><tr><td>753</td><td>Cracking the Safe</td><td></td></tr><tr><td>754</td><td>Reach a  Number</td><td></td></tr><tr><td>755</td><td>Pour Water</td><td></td></tr><tr><td>758</td><td>Bold Words  in String</td><td></td></tr><tr><td>759</td><td>Employee Free Time</td><td></td></tr><tr><td>762</td><td>Prime Number of Set Bits in Binary  Representation</td><td></td></tr><tr><td>763</td><td>Partition Labels</td><td></td></tr><tr><td>769</td><td>Max Chunks  To Make Sorted</td><td></td></tr><tr><td>773</td><td>Sliding Puzzle</td><td></td></tr><tr><td>775</td><td>Global and  Local Inversions</td><td></td></tr><tr><td>778</td><td>Swim in Rising Water</td><td></td></tr><tr><td>784</td><td>Letter Case  Permutation</td><td></td></tr><tr><td>786</td><td>K-th Smallest Prime Fraction</td><td></td></tr><tr><td>787</td><td>Cheapest  Flights Within K Stops</td><td></td></tr><tr><td>790</td><td>Domino and Tromino Tiling</td><td></td></tr><tr><td>792</td><td>Number of  Matching Subsequences</td><td></td></tr><tr><td>799</td><td>Champagne Tower</td><td></td></tr><tr><td>801</td><td>Minimum Swaps To Make Sequences Increasing</td><td></td></tr><tr><td>802</td><td>Find Eventual Safe States</td><td></td></tr><tr><td>803</td><td>Bricks  Falling When Hit</td><td></td></tr><tr><td>813</td><td>Largest Sum of Averages</td><td></td></tr><tr><td>815</td><td>Bus Routes</td><td></td></tr><tr><td>817</td><td>Linked List Components</td><td></td></tr><tr><td>818</td><td>Race Car2</td><td></td></tr><tr><td>818</td><td>Race Car</td><td></td></tr><tr><td>823</td><td>Binary Trees  With Factors</td><td></td></tr><tr><td>826</td><td>Most Profit Assigning Work</td><td></td></tr><tr><td>827</td><td>Making A  Large Island</td><td></td></tr><tr><td>841</td><td>Keys and Rooms</td><td></td></tr><tr><td>847</td><td>Shortest  Path Visiting All Nodes</td><td></td></tr><tr><td>848</td><td>Shifting Letters</td><td></td></tr><tr><td>856</td><td>Score of  Parentheses</td><td></td></tr><tr><td>863</td><td>All Nodes Distance K in Binary Tree</td><td></td></tr><tr><td>864</td><td>Shortest  Path to Get All Keys</td><td></td></tr><tr><td>865</td><td>Smallest Subtree with all the Deepest Nodes</td><td></td></tr><tr><td>871</td><td>Minimum  Number of Refueling Stops</td><td></td></tr><tr><td>873</td><td>Length of Longest Fibonacci Subsequence</td><td></td></tr><tr><td>877</td><td>Stone Game</td><td></td></tr><tr><td>879</td><td>Profitable Schemes</td><td></td></tr><tr><td>882</td><td>Reachable  Nodes In Subdivided Graph</td><td></td></tr><tr><td>886</td><td>Possible Bipartition</td><td></td></tr><tr><td>889</td><td>Construct Binary Tree from Preorder and  Postorder Traversal</td><td></td></tr><tr><td>891</td><td>Sum of Subsequence Widths</td><td></td></tr><tr><td>894</td><td>All Possible  Full Binary Trees</td><td></td></tr><tr><td>895</td><td>Maximum Frequency Stack</td><td></td></tr><tr><td>898</td><td>Bitwise ORs  of Subarrays</td><td></td></tr><tr><td>901</td><td>Online Stock Span</td><td></td></tr><tr><td>902</td><td>Numbers At  Most N Given Digit Set</td><td></td></tr><tr><td>923</td><td>3Sum With Multiplicity</td><td></td></tr><tr><td>926</td><td>Flip String  to Monotone Increasing</td><td></td></tr><tr><td>934</td><td>Shortest Bridge</td><td></td></tr><tr><td>935</td><td>Knight  Dialer</td><td></td></tr><tr><td>936</td><td>Stamping The Sequence</td><td></td></tr><tr><td>943</td><td>Find the  Shortest Superstring</td><td></td></tr><tr><td>952</td><td>Largest Component Size by Common Factor</td><td></td></tr><tr><td>956</td><td>Tallest  Billboard</td><td></td></tr><tr><td>959</td><td>Regions Cut By Slashes</td><td></td></tr><tr><td>964</td><td>Least  Operators to Express Number</td><td></td></tr><tr><td>967</td><td>Numbers With Same Consecutive Differences</td><td></td></tr><tr><td>972</td><td>Equal  Rational Numbers</td><td></td></tr><tr><td>973</td><td>K Closest Points to Origin</td><td></td></tr><tr><td>975</td><td>Odd Even  Jump</td><td></td></tr><tr><td>979</td><td>Distribute Coins in Binary Tree</td><td></td></tr><tr><td>980</td><td>Unique Paths  III</td><td></td></tr><tr><td>1000</td><td>Minimum Cost to Merge Stones</td><td></td></tr><tr><td>1017</td><td>Convert to  Base -2</td><td></td></tr><tr><td>1019</td><td>Next Greater Node In Linked List</td><td></td></tr><tr><td>1024</td><td>Video  Stitching</td><td></td></tr><tr><td>1043</td><td>Partition Array for Maximum Sum</td><td></td></tr><tr><td>1092</td><td>Shortest  Common Supersequenc</td><td></td></tr><tr><td>1105</td><td>Filling Bookcase Shelves</td><td></td></tr><tr><td>1106</td><td>Parsing A  Boolean Expression</td><td></td></tr><tr><td>1124</td><td>Longest Well-Performing Interval</td><td></td></tr><tr><td>1125</td><td>Smallest  Sufficient Team</td><td></td></tr><tr><td>1129</td><td>Shortest Path with Alternating Colors</td><td></td></tr></tbody></table><p>的</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InputFormat数据输入</title>
      <link href="2020/02/20/InputFormat%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5/"/>
      <url>2020/02/20/InputFormat%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="切片与MapTask并行度决定机制"><a href="#切片与MapTask并行度决定机制" class="headerlink" title="切片与MapTask并行度决定机制"></a>切片与MapTask并行度决定机制</h2><p><strong>数据块</strong>：Block是HDFS物理上把数据分成一块一块。</p><p><strong>数据切片</strong>：数据切片只是逻辑上对输入进行分片，并不会再磁盘上将其切分成片进行存储。</p><h2 id="Job提交流程源码和切片源码详解"><a href="#Job提交流程源码和切片源码详解" class="headerlink" title="Job提交流程源码和切片源码详解"></a>Job提交流程源码和切片源码详解</h2><ol><li><p>Job提交流程源码详解</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">waitForCompletion()submit();// 1建立连接connect();// 1）创建提交Job的代理new Cluster(getConfiguration());// （1）判断是本地yarn还是远程initialize(jobTrackAddr, conf); // 2 提交jobsubmitter.submitJobInternal(Job.this, cluster)// 1）创建给集群提交数据的Stag路径Path jobStagingArea = JobSubmissionFiles.getStagingDir(cluster, conf);// 2）获取jobid ，并创建Job路径JobID jobId = submitClient.getNewJobID();// 3）拷贝jar包到集群copyAndConfigureFiles(job, submitJobDir);rUploader.uploadFiles(job, jobSubmitDir);// 4）计算切片，生成切片规划文件writeSplits(job, submitJobDir);maps = writeNewSplits(job, jobSubmitDir);input.getSplits(job);// 5）向Stag路径写XML配置文件writeConf(conf, submitJobFile);conf.writeXml(out);// 6）提交Job,返回提交状态status = submitClient.submitJob(jobId, submitJobDir.toString(), job.getCredentials());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><img src="https://kiedeng.site/usr/uploads/2020/02/2136348625.png" alt="Snipaste_2020-02-20_22-05-42.png"></p><h2 id="FileInputFormat切片机制"><a href="#FileInputFormat切片机制" class="headerlink" title="FileInputFormat切片机制"></a>FileInputFormat切片机制</h2><h3 id="1-切片机制"><a href="#1-切片机制" class="headerlink" title="1 切片机制"></a>1 切片机制</h3><ul><li>简单的按照文件的内容长度进行切片</li><li>切片大小，默认等于Block大小</li><li>切片时不考虑数据集整体，而是逐个针对每一个文件单独切片</li></ul><p><strong>注</strong>：每次切片，都要判断切完剩下的部分是否大于块的1.1倍，不大于1.1倍就划分一块切片</p><h3 id="2-源码中计算机切片大小的公式"><a href="#2-源码中计算机切片大小的公式" class="headerlink" title="2 源码中计算机切片大小的公式"></a>2 源码中计算机切片大小的公式</h3><ul><li>Math. max(minSize, Math.min(maxSize, blockSize));</li><li>maprecduce.input.fileinputformat.split.minsize=1默认值为1</li><li>mapreduce.input.fileinputformat.split maxsize=LongMAXValue 默认值Long.MAXValue,因此，默认情况下，切片大小=blocksize</li></ul><h3 id="3-获取切片信息API"><a href="#3-获取切片信息API" class="headerlink" title="3 获取切片信息API"></a>3 获取切片信息API</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取切片的文件名称</span><span class="token class-name">String</span> name<span class="token operator">=</span>inputSplit<span class="token punctuation">.</span>getPath（）<span class="token punctuation">.</span>getName（）：<span class="token comment">//根据文件类型获取切片信息</span><span class="token class-name">FileSplit</span> inputSplit <span class="token operator">=</span>（<span class="token class-name">FileSplit</span>）context<span class="token punctuation">.</span>get <span class="token class-name">InputSplit</span>（）；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CombineTextInputFormat切片机制"><a href="#CombineTextInputFormat切片机制" class="headerlink" title="CombineTextInputFormat切片机制"></a>CombineTextInputFormat切片机制</h2><p>​        默认的TextInputFormat切片机制是对任务按文件规划切片，会产生大量小文件，产生大量的MapTask，处理效率极其低下，故CombineTextInputFormat来处理大量小文件的情况。</p><h3 id="1-虚拟存储切片最大值设置"><a href="#1-虚拟存储切片最大值设置" class="headerlink" title="1 虚拟存储切片最大值设置"></a>1 虚拟存储切片最大值设置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CombineTextInputFormat</span><span class="token punctuation">.</span> <span class="token function">setMaxInputSplitSize</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span><span class="token number">4194304</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">4</span>m<span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-切片机制"><a href="#2-切片机制" class="headerlink" title="2 切片机制"></a>2 切片机制</h3><p>生成切片过程包括：虚拟存储过程和切片过程二部分</p><ul><li><p>虚拟存储过程</p><blockquote><p>将目录下的所有文件与setMaxInputSize比较，小于则切分为一块，大于且小于两倍，则平分这一块，大于两倍，则切出一块setMaxInputSize的块</p></blockquote></li><li><p>切片过程</p><blockquote><p>判断虚拟存储文件大小是否大于setMaxInputSplitSize值，大于或等于则单独形成一个切片，否则和下一个切片进行合并，形成一个切片</p></blockquote></li></ul><h2 id="CombineTextInputFormat案例实操"><a href="#CombineTextInputFormat案例实操" class="headerlink" title="CombineTextInputFormat案例实操"></a>CombineTextInputFormat案例实操</h2><p>需求：将输入的大量小文件合并成一个切片统一处理（以WordCount为基础），准备四个文件。</p><p>只需要在Driver中添加输入格式即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果不设置InputFormat，它默认用的是TextInputFormat.class</span>job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span><span class="token class-name">CombineTextInputFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//虚拟存储切片最大值设置4m</span><span class="token class-name">CombineTextInputFormat</span><span class="token punctuation">.</span><span class="token function">setMaxInputSplitSize</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token number">4194304</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FileInputFormat实现类"><a href="#FileInputFormat实现类" class="headerlink" title="FileInputFormat实现类"></a>FileInputFormat实现类</h2><p>​    <strong>FileInputFormat</strong> 常见的接口实现类包括：<strong>TextinputFormat、KeyValue TextInputFormat、NLinelnputFormat、CombineTextinputFormat，自定义InputFormat</strong>等。</p><h3 id="1-TextInputFormat"><a href="#1-TextInputFormat" class="headerlink" title="1 TextInputFormat"></a>1 TextInputFormat</h3><p>FileInputFile默认的实现类，按行读，键为字节偏移量，LongWritable类型</p><h3 id="2-KeyValueTextInputFormat"><a href="#2-KeyValueTextInputFormat" class="headerlink" title="2 KeyValueTextInputFormat"></a>2 KeyValueTextInputFormat</h3><p>通过分隔符，分为key，value，课通过设置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置切割符</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">KeyValueLineRecordReader</span><span class="token punctuation">.</span>KEY_VALUE_SEPERATOR<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置输入格式</span>job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span><span class="token class-name">KeyValueTextInputFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-NlineInputFormat"><a href="#3-NlineInputFormat" class="headerlink" title="3 NlineInputFormat"></a>3 NlineInputFormat</h3><p>按照行数N来划分，即切片数=输入文件总行数/N</p><pre class="line-numbers language-none"><code class="language-none">// 7设置每个切片InputSplit中划分三条记录NLineInputFormat.setNumLinesPerSplit(job, 3);   // 8使用NLineInputFormat处理记录数  job.setInputFormatClass(NLineInputFormat.class);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-自定义InputFormat"><a href="#4-自定义InputFormat" class="headerlink" title="4 自定义InputFormat"></a>4 自定义InputFormat</h3><blockquote><p>需要自定义一个类继承FileInputFormat</p><p>改写RecordReader，实现封装为KV</p><p>输出是使用SequenceFileOutFormat输出合并文件</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化案例</title>
      <link href="2020/02/16/%E5%BA%8F%E5%88%97%E5%8C%96%E6%A1%88%E4%BE%8B/"/>
      <url>2020/02/16/%E5%BA%8F%E5%88%97%E5%8C%96%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>需求</strong>：统计每一个手机号耗费的总上行流量，下行流量，总流量</p><p><strong>编写MapReduce程序</strong>：</p><ol><li><p>编写流量统计的Bean对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>flowsum</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataInput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataOutput</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Writable</span><span class="token punctuation">;</span><span class="token comment">// 1 实现writable接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowBean</span> <span class="token keyword">implements</span> <span class="token class-name">Writable</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">long</span> upFlow<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">long</span> downFlow<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">long</span> sumFlow<span class="token punctuation">;</span><span class="token comment">//2  反序列化时，需要反射调用空参构造函数，所以必须有</span><span class="token keyword">public</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span><span class="token keyword">long</span> upFlow<span class="token punctuation">,</span> <span class="token keyword">long</span> downFlow<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>upFlow <span class="token operator">=</span> upFlow<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>downFlow <span class="token operator">=</span> downFlow<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sumFlow <span class="token operator">=</span> upFlow <span class="token operator">+</span> downFlow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//3  写序列化方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">DataOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>upFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>downFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>sumFlow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//4 反序列化方法</span><span class="token comment">//5 反序列化方法读顺序必须和写序列化方法的写顺序必须一致</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFields</span><span class="token punctuation">(</span><span class="token class-name">DataInput</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>upFlow  <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>downFlow <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sumFlow <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 6 编写toString方法，方便后续打印到文本</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> upFlow <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> downFlow <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> sumFlow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getUpFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> upFlow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpFlow</span><span class="token punctuation">(</span><span class="token keyword">long</span> upFlow<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>upFlow <span class="token operator">=</span> upFlow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDownFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> downFlow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDownFlow</span><span class="token punctuation">(</span><span class="token keyword">long</span> downFlow<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>downFlow <span class="token operator">=</span> downFlow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getSumFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> sumFlow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSumFlow</span><span class="token punctuation">(</span><span class="token keyword">long</span> sumFlow<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>sumFlow <span class="token operator">=</span> sumFlow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Mapper类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>flowsum</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowCountMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">FlowBean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token class-name">FlowBean</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Text</span> k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token comment">// 1 获取一行</span><span class="token class-name">String</span> line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 切割字段</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 封装对象</span><span class="token comment">// 取出手机号码</span><span class="token class-name">String</span> phoneNum <span class="token operator">=</span> fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 取出上行流量和下行流量</span><span class="token keyword">long</span> upFlow <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>fields<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> downFlow <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>fields<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>phoneNum<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>downFlow<span class="token punctuation">,</span> upFlow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 写出</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Reducer类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>flowsum</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowCountReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">FlowBean</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">FlowBean</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowBean</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token keyword">long</span> sum_upFlow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> sum_downFlow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 1 遍历所用bean，将其中的上行流量，下行流量分别累加</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FlowBean</span> flowBean <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>sum_upFlow <span class="token operator">+=</span> flowBean<span class="token punctuation">.</span><span class="token function">getUpFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sum_downFlow <span class="token operator">+=</span> flowBean<span class="token punctuation">.</span><span class="token function">getDownFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 2 封装对象</span><span class="token class-name">FlowBean</span> resultBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span>sum_upFlow<span class="token punctuation">,</span> sum_downFlow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 写出</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> resultBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Driver驱动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>flowsum</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileInputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowsumDriver</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token comment">// 输入输出路径需要根据自己电脑上实际的输入输出路径设置</span>args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"e:/input/inputflow"</span><span class="token punctuation">,</span> <span class="token string">"e:/output1"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 1 获取配置信息，或者job对象实例</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Job</span> job <span class="token operator">=</span> <span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 指定本程序的jar包所在的本地路径</span>job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span><span class="token class-name">FlowsumDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 指定本业务job要使用的mapper/Reducer业务类</span>job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span><span class="token class-name">FlowCountMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span><span class="token class-name">FlowCountReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 指定mapper输出数据的kv类型</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 指定最终输出的数据的kv类型</span>job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 指定job的输入原始文件所在目录</span><span class="token class-name">FileInputFormat</span><span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7 将job中配置的相关参数，以及job所用的java类所在的jar包， 提交给yarn去运行</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化概述</title>
      <link href="2020/02/16/%E5%BA%8F%E5%88%97%E5%8C%96%E6%A6%82%E8%BF%B0/"/>
      <url>2020/02/16/%E5%BA%8F%E5%88%97%E5%8C%96%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>​        序列化就是把内存中的对象，转换为字节序列（或者其他数据传输协议）以便于存储到磁盘（持久化）和网络传输。</p><p>​        反序列化就是将收到字节序列或者是磁盘的持久化数据，转换为内存中的对象</p><p><strong>原因：</strong>一般来说，“活的对象”只生产在内存里，关机断电就没有了，并且不能发送，然而序列化可以存储“活的”对象，可以将“活的”对象发送到远程计算机。</p><p>由于java序列化是一个重量级序列化框架（Serializable），序列化的时候，会附带很多额外的信息（各种校验信息，Header，继承体系等），不便于在网络中高效传输。故Hadoop开发了一套序列化机制(Writable)。</p><p>Hadoop序列化特点：</p><blockquote><p>紧凑：高效实用存储空间</p><p>快速：读写数据的额外开销小</p><p>可扩展：随着通信协议的升级而升级</p><p>互操作：支持多语言的交互</p></blockquote><h3 id="实现序列化接口（Writable）"><a href="#实现序列化接口（Writable）" class="headerlink" title="实现序列化接口（Writable）"></a>实现序列化接口（Writable）</h3><ol><li><p>必须实现Writable接口</p></li><li><p>反序列化时，需要反射调用空参构造函数，所以必须要有空参构造</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">FlowBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>重写序列化方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">DataOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>upFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>downFlow<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>sumFlow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重写反序列化方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFields</span><span class="token punctuation">(</span><span class="token class-name">DataInput</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>upFlow <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>downFlow <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sumFlow <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意反序列化的顺序和序列化的顺序完全一致</p></li><li><p>重写toString（），可用“\t”分开，方便后续用</p></li><li><p>如果需要将自定义的bean放在key中传输，则还需要实现Comparable接口，因为MapReduce框中的Shuffle过程要求对key必须能排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">FlowBean</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 倒序排列，从大到小</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sumFlow <span class="token operator">&gt;</span> o<span class="token punctuation">.</span><span class="token function">getSumFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordCount案例</title>
      <link href="2020/02/15/WordCount%E6%A1%88%E4%BE%8B/"/>
      <url>2020/02/15/WordCount%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>需求：</strong>在给定的文本文件中输出每个单词出现的总次数</p><ol><li><p>创建maven工程</p></li><li><p>pom.xml文件中添加一下依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hadoop-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hadoop-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hadoop-hdfs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在项目的资源目录下/src/main/resources目录下，新建一个文件，命名为“log4j.properties”</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">log4j.rootLogger=INFO, stdoutlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%nlog4j.appender.logfile=org.apache.log4j.FileAppenderlog4j.appender.logfile.File=target/spring.loglog4j.appender.logfile.layout=org.apache.log4j.PatternLayoutlog4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写程序</p><ol><li><p>编写mapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IntWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LongWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordcountMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token class-name">Text</span> k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IntWritable</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token comment">// 1 获取一行</span><span class="token class-name">String</span> line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 切割</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 输出</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>k<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Reduce类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>wordcount</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IntWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Reducer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordcountReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">int</span> sum<span class="token punctuation">;</span><span class="token class-name">IntWritable</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IntWritable</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">,</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token comment">// 1 累加求和</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">IntWritable</span> count <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>sum <span class="token operator">+=</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 2 输出</span>       v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Driver驱动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>wordcount</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IntWritable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Text</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span></span><span class="token class-name">Job</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span></span><span class="token class-name">FileInputFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span></span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordcountDriver</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span><span class="token comment">// 1 获取配置信息以及封装任务</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Job</span> job <span class="token operator">=</span> <span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 设置jar加载路径</span>job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span><span class="token class-name">WordcountDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 设置map和reduce类</span>job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span><span class="token class-name">WordcountMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span><span class="token class-name">WordcountReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 设置map输出</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">IntWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 设置最终输出kv类型</span>job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">IntWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 设置输入和输出路径</span><span class="token class-name">FileInputFormat</span><span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7 提交</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><ol><li><p>直接在eclipse/Idea上测试</p></li><li><p>集群上测试</p><ol><li><p>maven打jar包，需要添加打包插件依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-assembly-plugin <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">&gt;</span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>com.atguigu.mr.WordcountDriver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>make-assembly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果工程显示红叉，项目右键-&gt;maven-&gt;update project即可</p></li><li><p>maven install，将jar包放到Hadoop集群</p></li><li><p>执行WordCount</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hadoop jar  wc.jar com.atguigu.wordcount.WordcountDriver /user/atguigu/input /user/atguigu/output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
          <category> Mapreduce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS_2.X新特性</title>
      <link href="2020/02/14/HDFS-2-X%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>2020/02/14/HDFS-2-X%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="集群间的数据拷贝"><a href="#集群间的数据拷贝" class="headerlink" title="集群间的数据拷贝"></a>集群间的数据拷贝</h3><ol><li><p>scp实现两个远程主机之间的文件复制</p><p>​    scp -r hello.txt <a href="mailto:root@hadoop103:/user/atguigu/hello.txt">root@hadoop103:/user/atguigu/hello.txt</a>       // 推 push</p><p>​    scp -r [root@hadoop103:/user/atguigu/hello.txt hello.txt](mailto:root@hadoop103:/user/atguigu/hello.txt  hello.txt)      // 拉 pull</p><p>​    scp -r <a href="mailto:root@hadoop103:/user/atguigu/hello.txt">root@hadoop103:/user/atguigu/hello.txt</a> root@hadoop104:/user/atguigu  //是通过本地主机中转实现两个远程主机的文件复制；如果在两个远程主机之间ssh没有配置的情况下可以使用该方式。</p></li><li><p>采用distcp命令实现两个Hadoop集群之间的递归数据复制</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> bin/hadoop distcphdfs://haoop102:9000/user/atguigu/hello.txt hdfs://hadoop103:9000/user/atguigu/hello.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="小文件存档"><a href="#小文件存档" class="headerlink" title="小文件存档"></a>小文件存档</h3><ol><li><p>弊端</p><p>​    每个文件按块存储，每个块的数据在NameNode的内存中，因此HDFS存储小文件会非常低效。因为大量小文件会用尽NameNode的大部分内存。</p></li><li><p>解决小文件的办法之一</p><p>​    HDFS存档文件或Har文件，是一个更高效的文件存档工具。HDFS存档文件对内还是一个一个独立文件，对NameNode而言是一个整体，减少NameNode内存</p></li><li><p>实例</p><ol><li><p> 需要启动YARN进程</p></li><li><p>归档文件</p><p>​    把/user/atguigu/input目录里面的所有文件归档成一个叫input.har的归档文件，并把归档后文件存储到/user/atguigu/output路径下。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">bin/hadoop archive -archiveName input.har –p  /user/atguigu/input   /user/atguigu/output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看归档</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">hadoop fs -lsr /user/atguigu/output/input.harhadoop fs -lsr har:///user/atguigu/output/input.har<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>解归档文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">hadoop fs -cp har:/// user/atguigu/output/input.har/*    /user/atguigu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ol><h3 id="回收站"><a href="#回收站" class="headerlink" title="回收站"></a>回收站</h3><ol><li><p>开启回收站功能参数说明</p><ol><li>默认值fs.trash.interval=0,0表示禁用回收站</li><li>默认值fs.trash.checkpoint.interval=0,检查回收站的间隔时间。如果为0，则该值和fs.tarsh.interval的参数相等</li><li>要求fs.trash.checkpoint.interval&lt;=fs.trash.interval</li></ol></li><li><p>启动回收站</p><p>修改core-site.xml,配置垃圾回收时间为1分钟</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.trash.interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看回收站</p><p>回收站在集群中的路径：/user/atguigu/.Trash/….</p></li><li><p>修改访问垃圾回收站用户名称</p><p>进入垃圾回收站用户名称，默认是dr.who，修改为atguigu用户</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.http.staticuser.user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>调用moveToTrash（）才进入回收站</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Trash trash = New Trash(conf);trash.moveToTrash(path);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>恢复回收站数据</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hadoop fs -mv/user/atguigu/.Trash/Current/user/atguigu/input    /user/atguigu/input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>清空回收站</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hadoop fs -expunge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="快照管理"><a href="#快照管理" class="headerlink" title="快照管理"></a>快照管理</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs dfsadmin -allowSnapshot 路径（功能描述：开启指定目录的快照功能）hdfs dfsadmin -disallowSnapshot 路径（功能描述：禁用指定目录的快照功能，默认是禁用）hdfs dfs -createSnapshot 路径（功能描述：对目录创建快照）hdfs dfs -createSnapshot 路径名称（功能描述：指定名称创建快照）hdfs dfs -renameSnapshot 略径旧名称新名称（功能描述：重命名快照）hdfs lsSnapshottableDir（功能描述：列出当前用户所有可快照目录）hdfs snapshotDiff 路径1 路径2（功能描述：比较两个快照目录的不同之处）hdfs dfs -deleteSnapshot&lt;path&gt;&lt;snapshotName&gt;（功能描述：删除快照）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>开启/禁用指定目录的快照功能</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs dfsadmin -allowSnapshot /user/atguigu/inputhdfs dfsadmin -disallowSnapshot /user/atguigu/input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>对目录创建快照</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs dfs -createSnapshot /user/atguigu/inputhdfs dfs -lsr /user/atguigu/input/.snapshot/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>指定名称创建快照</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs dfs -createSnapshot /user/atguigu/input  miao170508<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>快照重命名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs dfs -renameSnapshot /user/atguigu/input/  miao170508 atguigu170508<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>列出当前用户所有可快照目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs lsSnapshottableDir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>比较两个快照目录的不同之处</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs snapshotDiff /user/atguigu/input/  .  .snapshot/atguigu170508<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>恢复快照</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs dfs -cp /user/atguigu/input/.snapshot/s20170708-134303.027 /user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NN与DataNode</title>
      <link href="2020/02/14/NN%E4%B8%8EDataNode/"/>
      <url>2020/02/14/NN%E4%B8%8EDataNode/</url>
      
        <content type="html"><![CDATA[<h2 id="NN和2NN工作机制"><a href="#NN和2NN工作机制" class="headerlink" title="NN和2NN工作机制"></a>NN和2NN工作机制</h2><p>FsImage:磁盘中备份元数据的文件</p><p>Edits：每当元数据有更新或者添加元数据时，修改内存中元数据并追加到Edits，为防止该文件数据过大影响效率，因此需要定期进行FsImage和Edits合并，引入一个节点SecondaryNamenode,专门用于FsImage和Edits的合并</p><h5 id="第一阶段：NameNode启动"><a href="#第一阶段：NameNode启动" class="headerlink" title="第一阶段：NameNode启动"></a>第一阶段：NameNode启动</h5><ol><li>第一次启动NameNode格式化后，创建Fsimage和Edits文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存。</li><li>客户端对元数据进行增删改的请求。</li><li>NameNode记录操作日志，更新滚动日志。</li><li>NameNode在内存中对数据进行增删改。</li></ol><h5 id="第二阶段：Secondary-NameNode工作"><a href="#第二阶段：Secondary-NameNode工作" class="headerlink" title="第二阶段：Secondary NameNode工作"></a>第二阶段：Secondary NameNode工作</h5><ol><li>Secondary NameNode询问NameNode是否需要CheckPoint。直接带回NameNode是否检查结果。</li><li>Secondary NameNode请求执行CheckPoint。</li><li>NameNode滚动正在写的Edits日志。</li><li>将滚动前的编辑日志和镜像文件拷贝到Secondary NameNode。</li><li>Secondary NameNode加载编辑日志和镜像文件到内存，并合并。</li><li>生成新的镜像文件fsimage.chkpoint。</li><li>拷贝fsimage.chkpoint到NameNode。</li><li>NameNode将fsimage.chkpoint重新命名成fsimage。</li></ol><p>*** opt/module/hadoop-2.7.2/data/tmp/dfs/name/current ***</p><h4 id="oiv查看Fsimage"><a href="#oiv查看Fsimage" class="headerlink" title="oiv查看Fsimage"></a>oiv查看Fsimage</h4><p>语法：hdfs oiv -p 文件类型 -i镜像文件 -o 转换后文件输出路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs oiv -p XML -i fsimage_0000000000000000025 -o /opt/module/hadoop-2.7.2/fsimage.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="oev查看Edits文件"><a href="#oev查看Edits文件" class="headerlink" title="oev查看Edits文件"></a>oev查看Edits文件</h4><p>语法：hdfs oev -p 文件类型 -i编辑日志 -o 转换后文件输出路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hdfs oev -p XML -i edits_0000000000000000012-0000000000000000013 -o /opt/module/hadoop-2.7.2/edits.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="CheckPoint时间设置"><a href="#CheckPoint时间设置" class="headerlink" title="CheckPoint时间设置"></a>CheckPoint时间设置</h4><ol><li><p>通常情况下，SecondaryNameNade每隔一个小时执行一次，在【hdfs-default.xml】中设置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.checkpoint.period<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>3600<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一分钟检查一次操作次数，3当操作次数达到1百万时，<br>SecondaryNameNode执行一次。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.checkpoint.txns<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>1000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>操作动作次数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.checkpoint.check.period<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span> 1分钟检查一次操作次数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span> <span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="NameNode故障处理"><a href="#NameNode故障处理" class="headerlink" title="NameNode故障处理"></a>NameNode故障处理</h2><p><strong>方法一：将SecondaryNameNode中数据拷贝到NameNode存储数据的目录</strong></p><ol><li><p>kill -9 NameNode过程</p></li><li><p>删除NameNode存储的数据（/opt/module/hadoop-2.7.2/data/tmp/dfs/name）</p></li><li><p>拷贝SecondaryNameNode中数据到原NameNode存储数据目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scp -r atguigu@hadoop104:/opt/module/hadoop-2.7.2/data/tmp/dfs/namesecondary/* ./name/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重新启动NameNode</p></li></ol><p><strong>方法二：使用-importCheckpoint选项启动NameNode守护进程，从而将SecondaryNameNode中数据拷贝到NameNode目录中。</strong></p><ol><li><p>修改hdfs-site.xml中的</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.checkpoint.period<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>120<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/module/hadoop-2.7.2/data/tmp/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>kill -9 NameNode进程</p></li><li><p>删除NameNode存储的数据</p></li><li><p>将2NN存储数据的目录拷贝到NN存储数据的评级目录，并删除in_use.lock文件</p></li><li><p>导入检查点数据</p><blockquote><p>sbin/hadoop-daemon.sh start namenode</p></blockquote></li><li><p>启动NameNode</p><blockquote><p>sbin/hadoop-daemon.sh start namenode</p></blockquote></li></ol><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><p>（1）bin/hdfs dfsadmin -safemode get    （功能描述：查看安全模式状态）</p><p>（2）bin/hdfs dfsadmin -safemode enter  （功能描述：进入安全模式状态）</p><p>（3）bin/hdfs dfsadmin -safemode leave   （功能描述：离开安全模式状态）</p><p>（4）bin/hdfs dfsadmin -safemode wait   （功能描述：等待安全模式状态）</p><h2 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h2><h3 id="DataNode工作机制"><a href="#DataNode工作机制" class="headerlink" title="DataNode工作机制"></a>DataNode工作机制</h3><ol><li>一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件，一个是数据本身，一个是元数据包括数据块的长度，块数据的校验和，以及时间戳。</li><li>DataNode启动后向NameNode注册，通过后，周期性（1小时）的向NameNode上报所有的块信息。</li><li>心跳是每3秒一次，心跳返回结果带有NameNode给该DataNode的命令如复制块数据到另一台机器，或删除某个数据块。如果超过10分钟没有收到某个DataNode的心跳，则认为该节点不可用。</li><li>集群运行中可以安全加入和退出一些机器。</li></ol><h3 id="保证DataNode的数据完整性"><a href="#保证DataNode的数据完整性" class="headerlink" title="保证DataNode的数据完整性"></a>保证DataNode的数据完整性</h3><p>1）当DataNode读取Block的时候，它会计算CheckSum。</p><p>2）如果计算后的CheckSum，与Block创建时值不一样，说明Block已经损坏。</p><p>3）Client读取其他DataNode上的Block。</p><p>4）DataNode在其文件创建后周期验证CheckSum</p><h3 id="掉线时限参数设置"><a href="#掉线时限参数设置" class="headerlink" title="掉线时限参数设置"></a>掉线时限参数设置</h3><blockquote><p>如果定义超时时间为TimeOut，则超时时长的计算公式为：<br>TimeOut =2<em>dfs.namenode.heartbeat.recheck-interval+10</em>dfs.heartbeat interval。而默认的dfs.namenode.heartbeat.recheck-interval 大小为5分钟，dfs.heartbeatinterval默认为3秒。</p></blockquote><p>配置位置：hdfs-site.xml，配置文件中的heartbeat.recheck.interval的单位为毫秒，dfs.heartbeat.interval的单位为秒。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.heartbeat.recheck-interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>300000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.heartbeat.interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服役新节点"><a href="#服役新节点" class="headerlink" title="服役新节点"></a>服役新节点</h3><ol><li>环境准备</li></ol><p>​    （1）在hadoop104主机上再克隆一台hadoop105主机</p><p>​    （2）修改IP地址和主机名称</p><p>​    （3）删除原来HDFS文件系统留存的文件（/opt/module/hadoop-2.7.2/data和log）</p><p>​    （4）source一下配置文件</p><pre class="line-numbers language-none"><code class="language-none">sbin/hadoop-daemon.sh start datanodesbin/yarn-daemon.sh start nodemanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><p>添加白名单</p><ol><li><p>在NameNode的/opt/module/hadoop-2.7.2/etc/hadoop目录下创建dfs.hosts文件，将允许的集群IP写入</p></li><li><p>在NameNode的hdfs-site.xml配置文件中增加dfs.hosts属性</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.hosts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/module/hadoop-2.7.2/etc/hadoop/dfs.hosts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件分发</p></li><li><p>刷新namenode：hdfs dfsadmin -refreshNodes</p></li><li><p>更新ResourceManager节点：yarn rmadmin -refreshNodes</p></li><li><p>数据如果不平衡，则：start-balancer.sh</p></li></ol></li><li><p>添加黑名单（不能同时有节点出现在两个中）</p><ol><li><p>在NameNode的/opt/module/hadoop-2.7.2/etc/hadoop目录下创建dfs.hosts.exclude文件</p></li><li><p>在NameNode的hdfs-site.xml配置文件中增加dfs.hosts.exclude属性</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.hosts.exclude<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/module/hadoop-2.7.2/etc/hadoop/dfs.hosts.exclude<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>刷新namenode和Resourcemanager</p></li></ol></li></ol><h3 id="Datanode多目录配置"><a href="#Datanode多目录配置" class="headerlink" title="Datanode多目录配置"></a>Datanode多目录配置</h3><ol><li><p>DataNode也可以配置成多个目录，每个目录存储的数据不一样。即：数据不是副本</p></li><li><p>hdfs-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>file:///${hadoop.tmp.dir}/dfs/data1,file:///${hadoop.tmp.dir}/dfs/data2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS的数据流</title>
      <link href="2020/02/13/HDFS%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
      <url>2020/02/13/HDFS%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h3 id="HDFS写数据流程"><a href="#HDFS写数据流程" class="headerlink" title="HDFS写数据流程"></a>HDFS写数据流程</h3><ol><li>客户端通过Distributed FileSysetm模块向NameNode请求上传文件，NameNode检查文件是否已存在，父目录是否存在</li><li>NameNode返回是否可以上传</li><li>客户端请求第一个Block上传哪几个DataNode服务器上</li><li>NameNode返回三个DataNode节点，分别为dn1，dn2，dn3</li><li>客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成</li><li>dn1，dn2，dn3逐级应答客户端</li><li>客户端开始往dn1上传第一个Block（先从磁盘读取数据收到一个本地内存缓存），以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传个dn3，dn1没传一个packet会放入一个应答队列等待应答</li><li>当一个Bloc传输完成之后，客户端再次请求NameNode上传第二个Block服务器</li></ol><h3 id="节点距离：两个节点到达最近的共同祖先的距离总和。"><a href="#节点距离：两个节点到达最近的共同祖先的距离总和。" class="headerlink" title="节点距离：两个节点到达最近的共同祖先的距离总和。"></a>节点距离：两个节点到达最近的共同祖先的距离总和。</h3><h3 id="机架感知"><a href="#机架感知" class="headerlink" title="机架感知"></a>机架感知</h3><blockquote><p>对于常见情况，当复制因子为3时，HDFS的放置策略是将一个副本放在本地机架中的一个节点上，另一个放在本地机架中的另一个节点上，最后一个放在不同机架中的另一个节点上</p></blockquote><h3 id="HDFS读数据流程"><a href="#HDFS读数据流程" class="headerlink" title="HDFS读数据流程"></a>HDFS读数据流程</h3><ol><li>客户端通过Distributed FileSystem向NameNode请求下载文件，NameNode通过查询元数据，找到文件块所在的DataNode地址。</li><li>挑选一台DataNode（就近原则，然后随机）服务器，请求读取数据</li><li>DataNode开始传输数据给客户端（从磁盘里面读取数据输入流，以Packet为单位来做校验）。</li><li>客户端以Packet为单位接收，先在本地缓存，然后写入目标文件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS客户端操作</title>
      <link href="2020/02/13/HDFS%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%93%8D%E4%BD%9C/"/>
      <url>2020/02/13/HDFS%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="客户端环境准备"><a href="#客户端环境准备" class="headerlink" title="客户端环境准备"></a>客户端环境准备</h2><h4 id="1-将编译hadoop-jar包放在路径下（比如：D-environment-hadoop-2-7-2）"><a href="#1-将编译hadoop-jar包放在路径下（比如：D-environment-hadoop-2-7-2）" class="headerlink" title="1 将编译hadoop jar包放在路径下（比如：D:\environment\hadoop-2.7.2）"></a>1 将编译hadoop jar包放在路径下（比如：D:\environment\hadoop-2.7.2）</h4><h4 id="2-配置HADOOP-HOME环境变量"><a href="#2-配置HADOOP-HOME环境变量" class="headerlink" title="2 配置HADOOP_HOME环境变量"></a>2 配置HADOOP_HOME环境变量</h4><blockquote><p>HADOOP_HOME   :     D:\environment\hadoop-2.7.2</p></blockquote><h4 id="3-配置Path环境变量"><a href="#3-配置Path环境变量" class="headerlink" title="3 配置Path环境变量"></a>3 配置Path环境变量</h4><blockquote><p>%HADOOP_HOME%\bin</p></blockquote><h4 id="4-创建一个Maven工程"><a href="#4-创建一个Maven工程" class="headerlink" title="4 创建一个Maven工程"></a>4 创建一个Maven工程</h4><h4 id="5-导入相应的依赖坐标-日志添加"><a href="#5-导入相应的依赖坐标-日志添加" class="headerlink" title="5 导入相应的依赖坐标+日志添加"></a>5 导入相应的依赖坐标+日志添加</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>HDFS-0529<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hadoop-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hadoop-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hadoop-hdfs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>jdk.tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jdk.tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">&gt;</span></span>${JAVA_HOME}/lib/tools.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要再项目的src/main/resources目录下，新建一个文件，命令为”log4j.properties”,在文件中填写</p><blockquote><p>log4j.rootLogger=INFO, stdout</p><p>log4j.appender.stdout=org.apache.log4j.ConsoleAppender</p><p>log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</p><p>log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n</p><p>log4j.appender.logfile=org.apache.log4j.FileAppender</p><p>log4j.appender.logfile.File=target/spring.log</p><p>log4j.appender.logfile.layout=org.apache.log4j.PatternLayout</p><p>log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n</p></blockquote><h4 id="6-创建包名：com-atguigu-hdfs"><a href="#6-创建包名：com-atguigu-hdfs" class="headerlink" title="6 创建包名：com.atguigu.hdfs"></a>6 创建包名：com.atguigu.hdfs</h4><h4 id="7-创建HdfsClient类"><a href="#7-创建HdfsClient类" class="headerlink" title="7 创建HdfsClient类"></a>7 创建HdfsClient类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HdfsClient</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">{</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 配置在集群上运行</span><span class="token comment">// configuration.set("fs.defaultFS", "hdfs://hadoop102:9000");</span><span class="token comment">// FileSystem fs = FileSystem.get(configuration);</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 创建目录</span>fs<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/1108/daxian/banzhang"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-执行程序"><a href="#8-执行程序" class="headerlink" title="8 执行程序"></a>8 执行程序</h4><blockquote><p>客户端去操作HDFS时，是有一个用户身份的。</p><p>默认情况下，HDFS客户端API会从JVM中获取一个参数来作为自己的用户身份：-DHADOOP_USER_NAME=atguigu，atguigu为用户名称。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token comment">// 配置文件</span><span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"fs.defaultFS"</span><span class="token punctuation">,</span> <span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取客户端对象</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/kangdong"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭客户端</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Over!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HDFS的API操作"><a href="#HDFS的API操作" class="headerlink" title="HDFS的API操作"></a>HDFS的API操作</h2><h3 id="HDFS文件上传（测试参数优先级）"><a href="#HDFS文件上传（测试参数优先级）" class="headerlink" title="HDFS文件上传（测试参数优先级）"></a>HDFS文件上传（测试参数优先级）</h3><h4 id="1-编写源代码"><a href="#1-编写源代码" class="headerlink" title="1 编写源代码"></a>1 编写源代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token comment">// 配置文件</span><span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"fs.defaultFS"</span><span class="token punctuation">,</span> <span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取客户端对象</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/kangdong"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭客户端</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Over!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-将hdfs-site-xml拷贝到项目的根目录（即资源目录下）"><a href="#2-将hdfs-site-xml拷贝到项目的根目录（即资源目录下）" class="headerlink" title="2 将hdfs-site.xml拷贝到项目的根目录（即资源目录下）"></a>2 将hdfs-site.xml拷贝到项目的根目录（即资源目录下）</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-参数优先级"><a href="#3-参数优先级" class="headerlink" title="3 参数优先级"></a>3 参数优先级</h4><blockquote><p>参数优先级排序：（1）客户端代码中设置的值 &gt;（2）ClassPath下的用户自定义配置文件 &gt;（3）然后是服务器的默认配置</p></blockquote><h3 id="HDFS文件的下载"><a href="#HDFS文件的下载" class="headerlink" title="HDFS文件的下载"></a>HDFS文件的下载</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// boolean delSrc 指是否将原文件删除</span><span class="token comment">// Path src 指要下载的文件路径</span><span class="token comment">// Path dst 指将文件下载到的路径</span><span class="token comment">// boolean useRawLocalFileSystem 是否开启文件校验</span>fs<span class="token punctuation">.</span><span class="token function">copyToLocalFile</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/banzhang.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"e:/banhua.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HDFS文件的删除"><a href="#HDFS文件的删除" class="headerlink" title="HDFS文件的删除"></a>HDFS文件的删除</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">fs<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/0508/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一参数是路径，第二个参数是判断是否递归删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="HDFS文件的改名"><a href="#HDFS文件的改名" class="headerlink" title="HDFS文件的改名"></a>HDFS文件的改名</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/banzhang.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/banhua.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="HDFS文件详情的查看"><a href="#HDFS文件详情的查看" class="headerlink" title="HDFS文件详情的查看"></a>HDFS文件详情的查看</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testListFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">{</span><span class="token comment">// 1获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 获取文件详情</span><span class="token class-name">RemoteIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocatedFileStatus</span><span class="token punctuation">&gt;</span></span> listFiles <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>listFiles<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">LocatedFileStatus</span> status <span class="token operator">=</span> listFiles<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出详情</span><span class="token comment">// 文件名称</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 长度</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 权限</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">getPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 分组</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取存储的块信息</span><span class="token class-name">BlockLocation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> blockLocations <span class="token operator">=</span> status<span class="token punctuation">.</span><span class="token function">getBlockLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BlockLocation</span> blockLocation <span class="token operator">:</span> blockLocations<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 获取块存储的主机节点</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hosts <span class="token operator">=</span> blockLocation<span class="token punctuation">.</span><span class="token function">getHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> host <span class="token operator">:</span> hosts<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------班长的分割线----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 3 关闭资源</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HDFS的I-O流操作"><a href="#HDFS的I-O流操作" class="headerlink" title="HDFS的I/O流操作"></a>HDFS的I/O流操作</h2><h3 id="HDFS文件上传"><a href="#HDFS文件上传" class="headerlink" title="HDFS文件上传"></a>HDFS文件上传</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">IOcopyFromLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/kiedeng.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FSDataOutputStream</span> fout <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/kg.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copyBytes</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span> fout<span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fout<span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HDFS文件下载"><a href="#HDFS文件下载" class="headerlink" title="HDFS文件下载"></a>HDFS文件下载</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 文件下载</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getFileFromHDFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">{</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 获取输入流</span><span class="token class-name">FSDataInputStream</span> fis <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/banhua.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 获取输出流</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:/banhua.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 流的对拷</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copyBytes</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span> fos<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 关闭资源</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定位文件读取"><a href="#定位文件读取" class="headerlink" title="定位文件读取"></a>定位文件读取</h3><ol><li><p>下载第一块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFileSeek1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">{</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 获取输入流</span><span class="token class-name">FSDataInputStream</span> fis <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/hadoop-2.7.2.tar.gz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 创建输出流</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:/hadoop-2.7.2.tar.gz.part1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 流的拷贝</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 5关闭资源</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>下载第二块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFileSeek2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">URISyntaxException</span><span class="token punctuation">{</span><span class="token comment">// 1 获取文件系统</span><span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileSystem</span> fs <span class="token operator">=</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:9000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> <span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 打开输入流</span><span class="token class-name">FSDataInputStream</span> fis <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/hadoop-2.7.2.tar.gz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3 定位输入数据位置</span>fis<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 创建输出流</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:/hadoop-2.7.2.tar.gz.part2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5 流的对拷</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copyBytes</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span> fos<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6 关闭资源</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">closeStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>合并文件</p><blockquote><p>​    在Window命令窗口中进入到目录E:\，然后执行如下命令，对数据进行合并</p><p>​    type hadoop-2.7.2.tar.gz.part2 &gt;&gt; hadoop-2.7.2.tar.gz.part1</p><p>合并完成后，将hadoop-2.7.2.tar.gz.part1重新命名为hadoop-2.7.2.tar.gz。解压发现该tar包非常完整。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop编译源码</title>
      <link href="2020/02/12/Hadoop%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81/"/>
      <url>2020/02/12/Hadoop%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="jar包准备"><a href="#jar包准备" class="headerlink" title="jar包准备"></a>jar包准备</h2><ol><li>hadoop-2.7.2-src.tar.gz</li><li>jdk-8u144-linux-x64.tar.gz</li><li>apache-ant-1.9.9-bin.tar.gz（build工具，打包用的）</li><li>apache-maven-3.0.5-bin.tar.gz</li><li>protobuf-2.5.0.tar.gz（序列化的框架）</li></ol><h2 id="jar包安装"><a href="#jar包安装" class="headerlink" title="jar包安装"></a>jar包安装</h2><h3 id="1-JDK解压，配置环境变量JAVA-HOME和PATH"><a href="#1-JDK解压，配置环境变量JAVA-HOME和PATH" class="headerlink" title="1 JDK解压，配置环境变量JAVA_HOME和PATH"></a>1 JDK解压，配置环境变量JAVA_HOME和PATH</h3><blockquote><p>#JAVA_HOME：</p><p>export JAVA_HOME=/opt/module/jdk1.8.0_144</p><p>export PATH=$PATH:$JAVA_HOME/bin</p></blockquote><p>source /etc/profile进行生效</p><h3 id="2-Maven解压，配置MAVEN-HOME和PATH"><a href="#2-Maven解压，配置MAVEN-HOME和PATH" class="headerlink" title="2 Maven解压，配置MAVEN_HOME和PATH"></a>2 Maven解压，配置MAVEN_HOME和PATH</h3><blockquote><p>[root@hadoop101 software]# tar -zxvf apache-maven-3.0.5-bin.tar.gz -C /opt/module/</p><p>[root@hadoop101 apache-maven-3.0.5]# vi conf/settings.xml</p><mirrors>  <!-- mirror   | Specifies a repository mirror site to use instead of a given repository. The repository that   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.   |<mirror>​    <id>mirrorId</id>​    <mirrorOf>repositoryId</mirrorOf>​    <name>Human Readable Name for this Mirror.</name>​    <url>http://my.repository.com/repo/path</url>   </mirror>   --><p>​    <mirror></mirror></p><p>​        <id>nexus-aliyun</id></p><p>​        <mirrorof>central</mirrorof></p><p>​        <name>Nexus aliyun</name></p><p>​        <url><a href="http://maven.aliyun.com/nexus/content/groups/public">http://maven.aliyun.com/nexus/content/groups/public</a></url></p><p>​    </p></mirrors><p>[root@hadoop101 apache-maven-3.0.5]# vi /etc/profile</p><p>#MAVEN_HOME</p><p>export MAVEN_HOME=/opt/module/apache-maven-3.0.5</p><p>export PATH=$PATH:$MAVEN_HOME/bin</p><p>[root@hadoop101 software]#source /etc/profile</p></blockquote><p><strong>验证命令：mvn-version</strong></p><h4 id="2-1-ant解压、配置-ANT-HOME和PATH"><a href="#2-1-ant解压、配置-ANT-HOME和PATH" class="headerlink" title="2.1 ant解压、配置  ANT _HOME和PATH"></a>2.1 ant解压、配置  ANT _HOME和PATH</h4><blockquote><p>[root@hadoop101 software]# tar -zxvf apache-ant-1.9.9-bin.tar.gz -C /opt/module/</p><p>[root@hadoop101 apache-ant-1.9.9]# vi /etc/profile</p><p>#ANT_HOME</p><p>export ANT_HOME=/opt/module/apache-ant-1.9.9</p><p>export PATH=$PATH:$ANT_HOME/bi</p><p>[root@hadoop101 software]#source /etc/profile</p></blockquote><h4 id="2-2-安装-glibc-headers-和-g-命令如下"><a href="#2-2-安装-glibc-headers-和-g-命令如下" class="headerlink" title="2.2 安装 glibc-headers 和  g++  命令如下"></a>2.2 安装 glibc-headers 和  g++  命令如下</h4><blockquote><p>[root@hadoop101 apache-ant-1.9.9]# yum install glibc-headers</p><p>[root@hadoop101 apache-ant-1.9.9]# yum install gcc-c++</p></blockquote><h4 id="2-3-安装make和cmake"><a href="#2-3-安装make和cmake" class="headerlink" title="2.3 安装make和cmake"></a>2.3 安装make和cmake</h4><blockquote><p>[root@hadoop101 apache-ant-1.9.9]# yum install make</p><p>[root@hadoop101 apache-ant-1.9.9]# yum install cmake</p></blockquote><h4 id="2-4-解压protobuf-，进入到解压后protobuf主目录，-opt-module-protobuf-2-5-0，然后相继执行命令"><a href="#2-4-解压protobuf-，进入到解压后protobuf主目录，-opt-module-protobuf-2-5-0，然后相继执行命令" class="headerlink" title="2.4 解压protobuf ，进入到解压后protobuf主目录，/opt/module/protobuf-2.5.0，然后相继执行命令"></a>2.4 解压protobuf ，进入到解压后protobuf主目录，/opt/module/protobuf-2.5.0，然后相继执行命令</h4><blockquote><p>[root@hadoop101 software]# tar -zxvf protobuf-2.5.0.tar.gz -C /opt/module/</p><p>[root@hadoop101 opt]# cd /opt/module/protobuf-2.5.0/</p><p>[root@hadoop101 protobuf-2.5.0]#./configure </p><p>[root@hadoop101 protobuf-2.5.0]# make </p><p>[root@hadoop101 protobuf-2.5.0]# make check </p><p>[root@hadoop101 protobuf-2.5.0]# make install </p><p>[root@hadoop101 protobuf-2.5.0]# ldconfig </p><p>[root@hadoop101 hadoop-dist]# vi /etc/profile</p><p>#LD_LIBRARY_PATH</p><p>export LD_LIBRARY_PATH=/opt/module/protobuf-2.5.0</p><p>export PATH=$PATH:$LD_LIBRARY_PATH</p><p>[root@hadoop101 software]#source /etc/profile</p></blockquote><h4 id="2-5-安装openssl库"><a href="#2-5-安装openssl库" class="headerlink" title="2.5 安装openssl库"></a>2.5 安装openssl库</h4><blockquote><p>[root@hadoop101 software]#yum install openssl-devel</p></blockquote><h4 id="2-6-安装-ncurses-devel库"><a href="#2-6-安装-ncurses-devel库" class="headerlink" title="2.6 安装 ncurses-devel库"></a>2.6 安装 ncurses-devel库</h4><blockquote><p>[root@hadoop101 software]#yum install ncurses-devel</p></blockquote><h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><h3 id="3-1-解压源码到-opt-目录"><a href="#3-1-解压源码到-opt-目录" class="headerlink" title="3.1 解压源码到/opt/目录"></a>3.1 解压源码到/opt/目录</h3><blockquote><p>tar -zxvf hadoop-2.7.2-src.tar.gz -C /opt/</p></blockquote><h3 id="3-2-进入源码主目录"><a href="#3-2-进入源码主目录" class="headerlink" title="3.2 进入源码主目录"></a>3.2 进入源码主目录</h3><h3 id="3-3-通过maven执行编译命令"><a href="#3-3-通过maven执行编译命令" class="headerlink" title="3.3 通过maven执行编译命令"></a>3.3 通过maven执行编译命令</h3><blockquote><p>mvn package -Pdist,native -DskipTests -Dtar</p></blockquote><h3 id="3-4-成功的64位hadoop包在-opt-hadoop-2-7-2-src-hadoop-dist-target下"><a href="#3-4-成功的64位hadoop包在-opt-hadoop-2-7-2-src-hadoop-dist-target下" class="headerlink" title="3.4 成功的64位hadoop包在/opt/hadoop-2.7.2-src/hadoop-dist/target下"></a>3.4 成功的64位hadoop包在/opt/hadoop-2.7.2-src/hadoop-dist/target下</h3>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件推荐</title>
      <link href="2020/02/11/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>2020/02/11/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h3 id="TinyTask"><a href="#TinyTask" class="headerlink" title="TinyTask"></a>TinyTask</h3><p>自动化操作工具</p><h3 id="Ditto"><a href="#Ditto" class="headerlink" title="Ditto"></a>Ditto</h3><p>复制神器</p><h3 id="SecureCRT"><a href="#SecureCRT" class="headerlink" title="SecureCRT"></a>SecureCRT</h3><p>一般大数据使用的远程工具</p><h3 id="PanDownload"><a href="#PanDownload" class="headerlink" title="PanDownload"></a>PanDownload</h3><p>网盘下载</p><h3 id="天若OCR文字识别"><a href="#天若OCR文字识别" class="headerlink" title="天若OCR文字识别"></a>天若OCR文字识别</h3><p>用于文字识别</p><h3 id="Snipaste"><a href="#Snipaste" class="headerlink" title="Snipaste"></a>Snipaste</h3><p>截图贴图工具</p><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p>markdown编辑器</p><h3 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h3><p>编辑器，可以进行文件夹文字查找</p><h3 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h3><p>编辑器，可以远程服务器</p><h3 id="Bandizip"><a href="#Bandizip" class="headerlink" title="Bandizip"></a>Bandizip</h3><p>解压工具</p><h3 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h3><p>虚拟机</p><h3 id="Xshell-Xftp"><a href="#Xshell-Xftp" class="headerlink" title="Xshell/Xftp"></a>Xshell/Xftp</h3><p>远程连接工具</p><h3 id="Adobe-Acrobat-DC"><a href="#Adobe-Acrobat-DC" class="headerlink" title="Adobe Acrobat DC"></a>Adobe Acrobat DC</h3><p>pdf阅读，编辑</p><h3 id="Anki"><a href="#Anki" class="headerlink" title="Anki"></a>Anki</h3><p>记忆工具</p><h3 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h3><p>查看文件</p><h3 id="PotPlayer"><a href="#PotPlayer" class="headerlink" title="PotPlayer"></a>PotPlayer</h3><p>播放器</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>浏览器</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用手册</title>
      <link href="2020/02/10/Linux%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>2020/02/10/Linux%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><blockquote><p><strong>#添加</strong></p><p>useradd kiedeng 或者 useradd -g [组名] 用户名</p><p><strong>#设置密码</strong></p><p>useradd 用户名</p><p><strong>#查看用户是否存在</strong></p><p>id 用户名</p><p><strong>#查看创建的用户</strong></p><p>cat /etc/passwd</p><p><strong>#切换用户</strong></p><p>su 用户名（没有获得环境变量）</p><p>su - 用户名 （获得环境变量）</p><p><strong>#删除用户</strong></p><p>userdel 用户名</p><p>userdel -r 用户名 （用户和用户目录全部删除）</p><p><strong>#设置root权限</strong></p><p>vim  /etc/sudoers</p><p>在root下中添加一行</p><p>用户名 ALL=(ALL) ALL</p><p>用户名 ALL=(ALL) NOPASSWDALL （不需要密码）</p><p><strong>修改usermod 修改用户</strong></p><p>usemod -g 用户组 用户名</p></blockquote><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><blockquote><p>添加：groupadd 组名</p><p>删除：groupdel 组名</p><p>修改组：groupmod -n 新组名 老组名</p><p>查看组：cat /etc/group</p></blockquote><h2 id="文件权限类"><a href="#文件权限类" class="headerlink" title="文件权限类"></a>文件权限类</h2><blockquote><p>总共10位：0~9</p><p>0位：-表示文件，d代表文件，l代表链接文档</p><p>1-3位确定属主的该文件权限</p><p>4-6位确定属组的该文件的权限</p><p>7-9位确定其他用户改文件的权限</p><p><strong>修改文件权限</strong></p><p>chmod 777 a.txt</p><p>chmod -R 777 xiyou （递归删除）</p><p>改变所有者</p><p>chown [选项] [最终用户] [文件或者目录]    选项为-R （递归操作）</p><p>改变所属组</p><p>chgrp [最终用户组] [文件或者目录]</p></blockquote><h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><p><strong>find 查找文件或者目录</strong></p><p>基本语法：find [搜索范围] [选项]</p><blockquote><p>选项</p><p>-name&lt;查询方式&gt; 按照指定文件名查找</p><p>-user&lt;用户名&gt; 指定用户查找</p><p>-size&lt;文件大小&gt; 按照文件大小查找 （+为大于，-为小于）</p><p>比如：find /home -size +20458</p></blockquote><p><strong>locate快速定位文件路径</strong></p><p>更新：updatedb</p><p>基本语法：locate 搜索文件</p><p><strong>grep 过滤查找及“|”管道符</strong></p><p>基本语法：grep 选项 查找内容 源文件 </p><h2 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h2><p><strong>gzip/gunzip压缩</strong></p><ul><li>只能压缩文件，不能压缩目录</li></ul><p>命令：gzip 文件；gunzip 文件. gz</p><p><strong>zip/unzip压缩</strong></p><p>基本语法：</p><blockquote><p> zip [选项] xxx.zip 将要压缩的内容 （目录或文件）</p><p>unzip [选项] xxx.zip 解压文件</p><p>选项：-d&lt;目录&gt; 指定压缩后文件存放的目录</p></blockquote><p><strong>tar 打包</strong></p><blockquote><p>tar [选项] xxx.tar.gz 将要打包进去的内容</p><p>选项</p><p>-c 产生tar打包文件</p><p>-v 显示详细信息</p><p>-f 指定压缩后的文件名</p><p>-z 打包同时压缩</p><p>-x 解包.tar文件</p></blockquote><p>压缩：tar -zcvf kie.tar.gz a.txt b.txt</p><p>解压：tar -zxvf kie.tar.gz -C /opt</p><h2 id="磁盘分区类"><a href="#磁盘分区类" class="headerlink" title="磁盘分区类"></a>磁盘分区类</h2>]]></content>
      
      
      <categories>
          
          <category> 使用手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop集群搭建</title>
      <link href="2020/02/10/hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>2020/02/10/hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h2><ul><li>配置好的Linux虚拟机-&gt; 管理 -&gt; 克隆</li></ul><p><strong>1 删除网卡，复制物理地址</strong>：vim /etc/udev/rules.d/70-persistent-net.rules</p><pre class="line-numbers language-none"><code class="language-none">删除eht0的那一行，将下一行的eth0改为eth1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2 配置网络：</strong>vim /etc/sysconfig/network-scripts/ifcfg-eth0</p><p>(删除UUID)</p><pre class="line-numbers language-none"><code class="language-none">IPADDR=192.168.1.101 设置ipONBOOT=yesNM_CONTROLLED=yesB00TPROTO=staticGATEWAY=192.168.1.2DNS1=192.168.1.2 和网关一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3 修改主机名称：</strong>vim /etc/sysconfig/network</p><pre class="line-numbers language-none"><code class="language-none">NETWORKING=yesHOSTNAME=hadoopl 01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>4 修改主机映射：</strong>vim /etc/hosts</p><p><strong>5 windows的映射：</strong>C:\Windows\System32\drivers\etc</p><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><h3 id="1-通过sftp将jdk放在-opt-software下"><a href="#1-通过sftp将jdk放在-opt-software下" class="headerlink" title="1 通过sftp将jdk放在/opt/software下"></a>1 通过sftp将jdk放在/opt/software下</h3><pre class="line-numbers language-none"><code class="language-none">tar -zxvf [gz文件名]  -C [解压的路径] <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-设置环境路径"><a href="#2-设置环境路径" class="headerlink" title="2 设置环境路径"></a>2 设置环境路径</h3><pre class="line-numbers language-none"><code class="language-none">#JAVA_HOMEexport JAVA_HOME=/opt/module/jdk1.8.0_144export PATH=$PATH:$JAVA_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-让修改以后的文件生效"><a href="#3-让修改以后的文件生效" class="headerlink" title="3 让修改以后的文件生效"></a>3 让修改以后的文件生效</h3><pre class="line-numbers language-none"><code class="language-none">source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h2><ul><li><p>将hadoop-2.7.2.tar.gz传入，解压</p></li><li><p>在/etc/profile添加环境变量</p></li></ul><pre class="line-numbers language-none"><code class="language-none">##HADOOP_HOMEexport HADOOP_HOME=/opt/module/hadoop-2.7.2export PATH=$PATH:$HADOOP_HOME/binexport PATH=$PATH:$HADOOP_HOME/sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>生效文件：source /etc/profile</li></ul><h2 id="Hadoop的目录结构"><a href="#Hadoop的目录结构" class="headerlink" title="Hadoop的目录结构"></a>Hadoop的目录结构</h2><ol><li>bin目录：存放对Hadoop相关服务（HDFS和YARN）进行操作的脚本</li><li>etc目录：Hadoop的配置目录，存放Hadoop的配置文件</li><li>lib目录：存放Hadoop的本地库（对数据进行压缩解压功能）</li><li>sbin目录：存放启动或者停止Hadoop相关服务的脚本</li><li>share目录：存放hadoop的jar包，官方文档和案例</li></ol><h2 id="Hadoop的运行模式"><a href="#Hadoop的运行模式" class="headerlink" title="Hadoop的运行模式"></a><strong>Hadoop的运行模式</strong></h2><p>​    本地模式，伪分布式模式，完成分布式模式</p><h3 id="一-本地模式"><a href="#一-本地模式" class="headerlink" title="一 本地模式"></a>一 本地模式</h3><h4 id="官方Grep案例"><a href="#官方Grep案例" class="headerlink" title="官方Grep案例"></a>官方Grep案例</h4><ol><li><p>在hadoop-2.7.2文件下面创建一个input文件夹</p></li><li><p>复制文件到input文件夹里面</p></li><li><p>执行share文件夹下的MapReduce程序</p><pre class="line-numbers language-none"><code class="language-none">bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar grep input output 'dfs[a-z.]+'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看输出结果</p><pre class="line-numbers language-none"><code class="language-none">cat output/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="官方WordCount案例（计算单词个数）"><a href="#官方WordCount案例（计算单词个数）" class="headerlink" title="官方WordCount案例（计算单词个数）"></a>官方WordCount案例（计算单词个数）</h4><ol><li><p>创建文件夹（wcinput）</p></li><li><p>在该文件夹创建并编辑文件内容</p></li><li><p>执行</p><pre class="line-numbers language-none"><code class="language-none">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount wcinput wcoutput<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看结果</p><pre class="line-numbers language-none"><code class="language-none">hadoop-2.7.2]$ cat wcoutput/part-r-00000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="二-伪分布式运行模式"><a href="#二-伪分布式运行模式" class="headerlink" title="二 伪分布式运行模式"></a>二 伪分布式运行模式</h3><h4 id="启动HDFS并运行MapReduce程序"><a href="#启动HDFS并运行MapReduce程序" class="headerlink" title="启动HDFS并运行MapReduce程序"></a>启动HDFS并运行MapReduce程序</h4><h4 id="1-配置集群"><a href="#1-配置集群" class="headerlink" title="1 配置集群"></a>1 配置集群</h4><ul><li><p>hadoop-env.sh(添加jdk路径)</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/opt/module/jdk1.8.0_144<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>core-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hdfs://hadoop101:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/module/hadoop-2.7.2/data/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>hdfs-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 指定HDFS副本的数量 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-启动集群"><a href="#2-启动集群" class="headerlink" title="2 启动集群"></a>2 启动集群</h4><ul><li><p>格式化NameNode（第一次启动时格式化，以后就不要格式化</p><blockquote><p>bin/hdfs namenode -format</p></blockquote></li><li><p>启动NameNode</p><blockquote><p>sbin/hadoop-daemon.sh start namenode</p></blockquote></li><li><p>启动DataNode</p><blockquote><p>sbin/hadoop-daemon.sh start datanode</p></blockquote></li></ul><h4 id="3-查看集群"><a href="#3-查看集群" class="headerlink" title="3 查看集群"></a>3 查看集群</h4><ul><li><p>web访问默认端口：50070</p></li><li><p>打开失败：<a href="https://www.cnblogs.com/zlslch/p/6604189.html">https://www.cnblogs.com/zlslch/p/6604189.html</a></p></li><li><p>log日志：/opt/module/hadoop-2.7.2/logs</p></li><li><p>不能一直格式化NameNode原因</p><blockquote><p>会产生新的集群id，导致NameNode和DataNode的集群id不一致，集群找不到数据，所以格式化前先删除data和log日志</p></blockquote></li></ul><h4 id="4-操作集群"><a href="#4-操作集群" class="headerlink" title="4 操作集群"></a>4 操作集群</h4><ul><li>（wordcount）执行操作和本地模式一样</li></ul><h4 id="启动YARN并运行MapReduce程序"><a href="#启动YARN并运行MapReduce程序" class="headerlink" title="启动YARN并运行MapReduce程序"></a>启动YARN并运行MapReduce程序</h4><h4 id="1-配置集群-1"><a href="#1-配置集群-1" class="headerlink" title="1 配置集群"></a>1 配置集群</h4><ul><li><p>yarn-env.sh(添加路径)</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/opt/module/jdk1.8.0_144<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置yarn-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- Reducer获取数据的方式 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop101<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mapred-env.sh(添加jdk路径)</p></li><li><p> (对mapred-site.xml.template重新命名为) mapred-site.xml</p></li></ul>  <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 指定MR运行在YARN上 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-启动集群-1"><a href="#2-启动集群-1" class="headerlink" title="2 启动集群"></a>2 启动集群</h4><ol><li><p>启动前必须先启动NameNode和DataNode</p></li><li><p>启动ResourceManager</p><pre class="line-numbers language-none"><code class="language-none">sbin/yarn-daemon.sh start resourcemanager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动NodeManager</p><pre class="line-numbers language-none"><code class="language-none">sbin/yarn-daemon.sh start nodemanager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="3-集群操作"><a href="#3-集群操作" class="headerlink" title="3 集群操作"></a>3 集群操作</h4><ol><li><p>yarn访问端口：8088</p></li><li><p>删除文件系统的ouput文件</p><blockquote><p>bin/hdfs dfs -rm -R /user/kiedong/output</p></blockquote></li><li><p>执行MapReduce程序</p><blockquote><p>bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount /user/atguigu/input /user/atguigu/output</p></blockquote></li></ol><h4 id="配置历史服务器"><a href="#配置历史服务器" class="headerlink" title="配置历史服务器"></a>配置历史服务器</h4><ul><li><p>配置mapred-site.xml,添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 历史服务器端地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop101:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 历史服务器web端地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop101:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动历史服务器</p><blockquote><p>sbin/mr-jobhistory-daemon.sh start historyserver</p></blockquote></li><li><p>端口：19888</p></li></ul><h4 id="配置日志的聚集"><a href="#配置日志的聚集" class="headerlink" title="配置日志的聚集"></a>配置日志的聚集</h4><p>日志聚集的概念：应用程序运行完成以后，程序运行日志上传到HDFS系统上</p><p>日志聚集的好处：方便开发调试</p><p><strong>注意</strong>：开启此功能，需要重新启动NodeManager，ResourceManager和HistoryManager</p><ul><li><p>yarn-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 日志聚集功能使能 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.log-aggregation-enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 日志保留时间设置7天 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.log-aggregation.retain-seconds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>604800<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关闭,然后NodeManager 、ResourceManager和HistoryManager</p></li><li><p>执行WordCount案例</p></li><li><p>查看日志端口：19888</p></li></ul><h3 id="三-完全分布式运行模式（重点）"><a href="#三-完全分布式运行模式（重点）" class="headerlink" title="三 完全分布式运行模式（重点）"></a>三 完全分布式运行模式（重点）</h3><h4 id="主要步骤："><a href="#主要步骤：" class="headerlink" title="主要步骤："></a><strong>主要步骤：</strong></h4><ol><li>准备三台客户机（关闭防火墙，静态ip，主机名称）</li><li>安装JDK</li><li>配置环境变量</li><li>安装Hadoop</li><li>配置环境变量</li><li>配置集群</li><li>单点启动</li><li>配置ssh</li><li>群起并测试集群</li></ol><h4 id="编写集群分发脚本xsync"><a href="#编写集群分发脚本xsync" class="headerlink" title="编写集群分发脚本xsync"></a>编写集群分发脚本xsync</h4><ol><li><p>scp（secure copy）安全拷贝</p><ol><li><p>scp可以实现服务器与服务器之间的数据拷贝</p></li><li><p>语法:将hadoop101传给hadoop102</p><blockquote><p>scp -r /opt/module root@hadoop102:/opt/module</p></blockquote></li></ol></li><li><p>rsync远程同步工具</p><ol><li>主要用于备份和镜像。</li><li>与scp区别：rsync只对差异性文件做更新。scp是复制所有文件</li><li>rsync -rvl /opt/software root@hadoop102:/opt/software</li><li>-r 递归 -v显示复制过程 -l拷贝符号连接</li></ol></li><li><p>xsync集群分发脚本（本集群使用）</p><ol><li><p>需求：循环复制文件到所有节点的相同目录下</p></li><li><p>在home/用户名/bin这个目录下存放脚本，这样次用户可以在系统任何地方直接执行</p></li><li><p>编写代码：vim xsync</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bash#1 获取输入参数个数，如果没有参数，直接退出pcount=$#if((pcount==0)); thenecho no args;exit;fi#2 获取文件名称p1=$1fname=`basename $p1`echo fname=$fname#3 获取上级目录到绝对路径pdir=`cd -P $(dirname $p1); pwd`echo pdir=$pdir#4 获取当前用户名称user=`whoami`#5 循环for((host=103; host&lt;105; host++)); do        echo ------------------- hadoop$host --------------        rsync -rvl $pdir/$fname $user@hadoop$host:$pdirdone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改脚本xsync具有执行权限</p><blockquote><p>chomod 777 xsync</p></blockquote></li></ol></li></ol><h4 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h4><ol><li><p>核心配置文件</p><ul><li><p>core-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hdfs://hadoop102:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>/opt/module/hadoop-2.7.2/data/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>HDFS配置文件</p><ul><li><p>hadoop-en.sh：配置环境变量</p></li><li><p>hdfs-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop104:50090<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>YARN配置文件</p><ul><li><p>yarn-env.sh：配置环境变量</p></li><li><p>yarn-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- Reducer获取数据的方式 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>hadoop103<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>MapReduce配置文件</p><ul><li><p>mapred-env.sh：配置环境变量</p></li><li><p>配置mapred-env.sh</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">cp mapred-site.xml.template mapred-site.xml<span class="token comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h4 id="集群单点启动"><a href="#集群单点启动" class="headerlink" title="集群单点启动"></a>集群单点启动</h4><ul><li>第一次启动，需要格式化NameNode</li></ul><blockquote><p>hadoop namenode -format</p></blockquote><ul><li>在hadoop102上启动NameNode</li></ul><blockquote><p>hadoop-daemon.sh start namenode</p></blockquote><ul><li>在hadoop102,103,104分别启动DataNode</li></ul><h4 id="ssh无密码登陆配置"><a href="#ssh无密码登陆配置" class="headerlink" title="ssh无密码登陆配置"></a>ssh无密码登陆配置</h4><ul><li>原理</li></ul><blockquote><p>将A服务器生成的公钥拷贝给B服务器，当A将数据用私钥A加密，</p><p>则B用A的公钥解密，并将数据用公钥加密给A</p></blockquote><ul><li>生成公钥和私钥</li></ul><blockquote><p>ssh-keygen -t rsa</p></blockquote><ul><li>将公钥拷贝到免密的目标机器上</li></ul><blockquote><p>ssh-copy-id hadoop102</p><p>ssh-copy-id hadoop103</p><p>ssh-copy-id hadoop104</p></blockquote><p>注意：root用户需要再进行一次拷贝，在hadoop103生成公私钥拷贝给其他机器</p><ul><li>.ssh文件夹下文件功能解释</li></ul><blockquote><p>known_hosts:记录ssh访问过计算机的公钥</p><p>id_rsa : 生成的私钥</p><p>id_rsa.pub:生成的公钥</p><p>  authorized_keys  ：  存放授权过得无密登录服务器公钥  </p></blockquote><h4 id="群起集群"><a href="#群起集群" class="headerlink" title="群起集群"></a>群起集群</h4><ul><li>配置slaves，并同步slaves</li></ul><blockquote><p>hadoop102</p><p>hadoop103</p><p>hadoop104</p></blockquote><ul><li><p>启动集群</p><ul><li><p>第一次先格式化NameNode（先停止以前运行的namenode和datanode，然后删除data和log数据）</p></li><li><p>启动</p><blockquote><p>sbin/start-dfs.sh    (hadoop102上)</p><p>sbin/start-yarn.sh（hadoop03上）</p></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装与配置</title>
      <link href="2020/02/10/Linux%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>2020/02/10/Linux%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="安装时注意事项-用VMware安装centos-大数据虚拟机"><a href="#安装时注意事项-用VMware安装centos-大数据虚拟机" class="headerlink" title="安装时注意事项(用VMware安装centos[大数据虚拟机])"></a>安装时注意事项(用VMware安装centos[大数据虚拟机])</h3><ol><li><p>检查BIOS虚拟化支持</p></li><li><p>内存默认设置为2048MB</p></li><li><p>最大磁盘大小默认为20GB</p></li><li><p>是否对CD媒体进行测试，<strong>直接跳过Skip</strong></p></li><li><p>创建自定义分区(都是标准分区)</p><pre class="line-numbers language-none"><code class="language-none">boot 默认： 100MBwap 默认：2048MB/ 默认：15360<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>自定义系统软件</p><pre class="line-numbers language-none"><code class="language-none">基本系统：兼容程序库；基本应用程序：互联网浏览器桌面：除了KDE,其余都选语言支持：中文支持<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Kdump去掉</p></li></ol><h3 id="查看网络IP和网关"><a href="#查看网络IP和网关" class="headerlink" title="查看网络IP和网关"></a>查看网络IP和网关</h3><p>编辑 -&gt; 虚拟网络编辑器 -&gt; NAT模式 即可看到子网IP</p><p>NET设置可以看到网关</p><h3 id="设置IP"><a href="#设置IP" class="headerlink" title="设置IP"></a>设置IP</h3><h4 id="自动获取"><a href="#自动获取" class="headerlink" title="自动获取"></a>自动获取</h4><p>登录后，通过界面来设置自动获取</p><h4 id="指定固定ip"><a href="#指定固定ip" class="headerlink" title="指定固定ip"></a>指定固定ip</h4><p>​    直接修改配置文件来指定IP,并可以连接到外网(程序员推荐)，编辑   vi  /etc/sysconfig/network-scripts/ifcfg-eth0<br>​    要求：将ip地址配置的静态的，ip地址为192.168.xxx.xxx</p><pre class="line-numbers language-none"><code class="language-none">DEVICE=eth0                #接口名（设备,网卡）HWADDR=00:0C:2x:6x:0x:xx   #MAC地址 TYPE=Ethernet               #网络类型（通常是Ethemet）UUID=926a57ba-92c6-4231-bacb-f27e5e6a9f44  #随机id#系统启动的时候网络接口是否有效（yes/no）ONBOOT=yes                # IP的配置方法[none|static|bootp|dhcp]（引导时不使用协议|静态分配IP|BOOTP协议|DHCP协议）BOOTPROTO=static      #IP地址IPADDR=192.168.189.130  #网关  GATEWAY=192.168.189.2      #域名解析器DNS1=192.168.189.2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重启网络服务或者重启系统生效</strong>：service  network restart  、reboot</p><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><p>查看当前主机名：hostname</p><p>修改主机名：/etc/hostname</p><p>修改主机映射文件：vim /etc/sysconfig/network</p><pre class="line-numbers language-none"><code class="language-none">NETWORKING=yesNETWORKING_IPV6=noHOSTNAME= hadoop //写入新的主机名注意：主机名称不要有“_”下划线 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改ip与主机的映射：/etc/hosts</p><pre class="line-numbers language-none"><code class="language-none">192.168.102.130  hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Windows设置本地dns解析"><a href="#Windows设置本地dns解析" class="headerlink" title="Windows设置本地dns解析"></a>Windows设置本地dns解析</h3><blockquote><p>C:\Windows\System32\drivers\etc\hosts  </p><p>添加内容：192.168.102.130 hadoop</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VMware </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用</title>
      <link href="2020/02/10/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/02/10/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Git的优势："><a href="#Git的优势：" class="headerlink" title="Git的优势："></a>Git的优势：</h3><blockquote><p>大部分操作在本地完成，不需要联网</p><p>完整性保证</p><p>尽可能添加数据而不是删除或修改数据</p><p>分支操作非常快捷流畅</p><p>与Linux命令全面兼容</p></blockquote><h3 id="代码托管中心"><a href="#代码托管中心" class="headerlink" title="代码托管中心"></a>代码托管中心</h3><blockquote><p>代码托管中心的任务：维护远程库</p><p>局域网环境：GitLab服务器</p><p>外网环境：GitHub，码云</p></blockquote><h3 id="Git命令行操作"><a href="#Git命令行操作" class="headerlink" title="Git命令行操作"></a>Git命令行操作</h3><ol><li><p>本库初始化（选择文件夹进行初始化）</p><pre class="line-numbers language-none"><code class="language-none">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置签名</p><ul><li><p>作用：区分不同开发者的身份</p></li><li><p>辨析：这里设置的签名和登录远程库(代码托管中心)的账号、密码没有任何关<br>系。</p></li><li><p>命令：</p></li></ul><pre class="line-numbers language-none"><code class="language-none">项目级别/仓库级别：仅在当前本地库范围内有效git config user.name kiedenggit config user.email kiedeng@qq.com信息保存位置：./.git/config 文件系统用户级别：登录当前操作系统的用户范围git config --global user.name tom_glbgit config --global goodMorning_pro@atguigu.com信息保存位置：~/.gitconfig 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基本操作</p><pre class="line-numbers language-none"><code class="language-none"># 状态查看git status# 添加 (将工作区的文件或目录提交到暂存区)git [filename]# 提交 (将暂存区的文件提交的本地库)git commit -m "commit message" [filename]# 查看历史版本git loggit reflog# 版本的前进与后退（基于索引值操作）git reset --hard [局部索引值]git reset --hard a6ace91<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分支管理</p><ul><li>分支：在版本控制过程中，使用多条线同时推进多个任务。</li></ul><pre class="line-numbers language-none"><code class="language-none"># 创建分支git branch [分支名]# 查看分支git branch -v# 切换分支git checkout [分支名]# 合并git merge [被和并的分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><pre class="line-numbers language-none"><code class="language-none"># 查看所有远程地址别名git remote -v# 创建远程库地址别名git remote add [别名] [远程地址]# 推送 (将本地库上传到github仓库)git push [别名] [分支名]# 克隆(这样克隆：把远程库下载到本地，初始化本地库，创建别名)git origin [远程地址]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 使用手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建</title>
      <link href="2020/02/10/hexo%E6%90%AD%E5%BB%BA/"/>
      <url>2020/02/10/hexo%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>官方文档</strong>： <a href="https://hexo.io/zh-cn/docs/" title="文档">链接</a></p><h2 id="一，使用Windows完成本地部署"><a href="#一，使用Windows完成本地部署" class="headerlink" title="一，使用Windows完成本地部署"></a>一，使用Windows完成本地部署</h2><h3 id="1-安装node-js和git-默认安装方式即可"><a href="#1-安装node-js和git-默认安装方式即可" class="headerlink" title="1 安装node.js和git,默认安装方式即可"></a>1 安装node.js和git,默认安装方式即可</h3><h3 id="2-安装hexo，打开cmd执行"><a href="#2-安装hexo，打开cmd执行" class="headerlink" title="2 安装hexo，打开cmd执行"></a>2 安装hexo，打开cmd执行</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-cmd移动到选择的一个文件夹，比如：d-blog-下面全部假设初始化在本路径-进行hexo的初始化"><a href="#3-cmd移动到选择的一个文件夹，比如：d-blog-下面全部假设初始化在本路径-进行hexo的初始化" class="headerlink" title="3 cmd移动到选择的一个文件夹，比如：d:\blog(下面全部假设初始化在本路径),进行hexo的初始化"></a>3 cmd移动到选择的一个文件夹，比如：d:\blog(下面全部假设初始化在本路径),进行hexo的初始化</h3><pre class="line-numbers language-none"><code class="language-none">hexo init blog  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-在此目录安装"><a href="#4-在此目录安装" class="headerlink" title="4 在此目录安装"></a>4 在此目录安装</h3><pre class="line-numbers language-none"><code class="language-none">npm install <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-启动服务器，访问的默认地址：http-localhost-4000"><a href="#5-启动服务器，访问的默认地址：http-localhost-4000" class="headerlink" title="5 启动服务器，访问的默认地址：http://localhost:4000/"></a>5 启动服务器，访问的默认地址：<a href="http://localhost:4000/">http://localhost:4000/</a></h3><pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二，使用GitHub完成远程部署"><a href="#二，使用GitHub完成远程部署" class="headerlink" title="二，使用GitHub完成远程部署"></a>二，使用GitHub完成远程部署</h2><h3 id="1-注册，登录github"><a href="#1-注册，登录github" class="headerlink" title="1 注册，登录github"></a>1 注册，登录github</h3><h3 id="2-新建仓库步骤如下："><a href="#2-新建仓库步骤如下：" class="headerlink" title="2 新建仓库步骤如下："></a>2 新建仓库步骤如下：</h3><blockquote><p>点击右上角+号，new repository，在Repository name处填 （你的gitusername）.github.io（比如：kiedeng.github.io），然后直接点Create repository</p></blockquote><h3 id="3-在你初始化的路径（比如的d-blog）下有一个-config-xml-用记事本打开此文件，最后几行添加github信息"><a href="#3-在你初始化的路径（比如的d-blog）下有一个-config-xml-用记事本打开此文件，最后几行添加github信息" class="headerlink" title="3 在你初始化的路径（比如的d:\blog）下有一个_config.xml,用记事本打开此文件，最后几行添加github信息"></a>3 在你初始化的路径（比如的d:\blog）下有一个_config.xml,用记事本打开此文件，最后几行添加github信息</h3><pre class="line-numbers language-none"><code class="language-none">(对于repo，比如：https://github.com/kiedeng/kiedeng.github.io.git)deploy:type: gitrepo: https://github.com/( yours username)/（your username）.github.io.gitbranck: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-将cmd移动到d-blog下，安装"><a href="#4-将cmd移动到d-blog下，安装" class="headerlink" title="4 将cmd移动到d:\blog下，安装"></a>4 将cmd移动到d:\blog下，安装</h3><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-执行"><a href="#5-执行" class="headerlink" title="5 执行"></a>5 执行</h3><pre class="line-numbers language-none"><code class="language-none"># 清理hexo clean# 生成静态文件hexo generate# 上传hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在弹出的git窗口中输入你的GitHub邮箱和密码</li><li>部署完成，等待一会，使用比如：<a href="http://kiedeng.github.io/%E8%AE%BF%E9%97%AE">http://kiedeng.github.io/访问</a></li></ol><h2 id="三，更换hexo主题"><a href="#三，更换hexo主题" class="headerlink" title="三，更换hexo主题"></a>三，更换hexo主题</h2><ol><li><p>找到hexo的主题</p><ul><li>推荐主题：<a href="https://blog.csdn.net/zgd826237710/article/details/99671027">链接</a></li></ul></li><li><p>选择一款，到达它们的github仓库（如果该主题作者的有文档，按文档即可完成更换）</p></li><li><p>将该主题下载下来（克隆也行），解压到d:\blog\themes,将该文件目录更名，比如：kiedeng</p></li><li><p>打开d:\blog_config.xml,将theme: 后面的参数改为</p><pre class="line-numbers language-none"><code class="language-none">theme: kiedeng<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p> 然后就可以部署和上传了</p></li></ol><h2 id="四，绑定域名"><a href="#四，绑定域名" class="headerlink" title="四，绑定域名"></a>四，绑定域名</h2><ol><li>选择一个合适的域名，买下域名</li><li>在域名的详细界面，打开解析</li><li>设置dns解析</li></ol><img src="https://kiedeng.github.io/picture/hexo_picture/hexo_搭建/dns_config.png" width="" height="" align="right"><ol start="4"><li>在d:\blog\source目录下，新建一个叫CNAME的文件（<strong>强调：</strong>不能有后缀），里面的内容为你的域名，比如:<a href="http://www.kangdong.store/">www.kangdong.store</a></li><li>等待一小会即可进行访问</li></ol>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
